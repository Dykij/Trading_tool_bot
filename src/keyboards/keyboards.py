from typing import List, Dict, Optional, Union, Any
import logging

# Try to import aiogram
try:
    from aiogram.types import (
        InlineKeyboardButton,
        InlineKeyboardMarkup,
        KeyboardButton,
        ReplyKeyboardMarkup,
        WebAppInfo,
        ReplyKeyboardRemove
    )
    
    # Try to detect aiogram version
    import pkg_resources
    try:
        aiogram_version = pkg_resources.get_distribution("aiogram").version
        IS_AIOGRAM_V2 = aiogram_version.startswith("2.")
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º aiogram –≤–µ—Ä—Å–∏–∏: {'v2' if IS_AIOGRAM_V2 else 'v3'}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ aiogram: {e}")
        IS_AIOGRAM_V2 = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º v2
    
except ImportError:
    print("–û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å aiogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    IS_AIOGRAM_V2 = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º v2

try:
    from handlers.callbacks import (
        BuyingCallback,
        CancelCallback,
        DeleteCallback,
        ItemBuyCallback,
        MenuCallback,
        PaginationCallback
    )
except ImportError:
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –º–æ–¥—É–ª—å handlers.callbacks –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("keyboards")

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π aiogram
class KeyboardFactory:
    @staticmethod
    def create_reply_keyboard(buttons: List[List[str]], resize_keyboard: bool = True) -> ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∫–Ω–æ–ø–æ–∫
            resize_keyboard: –ù—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
        Returns:
            –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        keyboard = []
        for row in buttons:
            keyboard_row = []
            for button_text in row:
                keyboard_row.append(KeyboardButton(text=button_text))
            keyboard.append(keyboard_row)
        
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=resize_keyboard
        )
    
    @staticmethod
    def create_inline_keyboard_v2(buttons: List[List[Dict[str, str]]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è aiogram v2.
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫ (text, command, param, url)
            
        Returns:
            –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        keyboard = InlineKeyboardMarkup()
        
        for row in buttons:
            row_buttons = []
            for button in row:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                text = button.get("text", "")
                command = button.get("command", "")
                param = button.get("param", "")
                url = button.get("url", None)
                
                if url:
                    row_buttons.append(InlineKeyboardButton(text=text, url=url))
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: "command:param"
                    callback_data = f"{command}:{param}" if param else command
                    row_buttons.append(InlineKeyboardButton(text=text, callback_data=callback_data))
            
            keyboard.add(*row_buttons)
        
        return keyboard
    
    @staticmethod
    def create_inline_keyboard(buttons: List[List[Dict[str, str]]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ aiogram.
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫
            
        Returns:
            –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é v2, —Ç–∞–∫ –∫–∞–∫ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ IS_AIOGRAM_V2 = True
        return KeyboardFactory.create_inline_keyboard_v2(buttons)

# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ keyboards/keyboards.py
def get_main_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.
    """
    buttons = [
        [
            KeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã"),
            KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        ],
        [
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")
        ]
    ]

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )


def get_menu_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é.

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ–Ω—é.
    """
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã",
            callback_data="menu:add_items"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="üìã –ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã",
            callback_data="menu:my_items"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="menu:statistics"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å DMarket",
            web_app=WebAppInfo(url="https://dmarket.com")
        )
    )

    return builder.as_markup()


def get_cancel_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è.

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã.
    """
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_action"
        )
    )

    return builder.as_markup()


def get_my_items_kb(items: List[Dict], page: int = 0, items_per_page: int = 5) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

    Args:
        items: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0).
        items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    """
    builder = InlineKeyboardBuilder()

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(items))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for item in items[start_idx:end_idx]:
        builder.row(
            InlineKeyboardButton(
                text=f"{item['name']} | ${item['price']}",
                callback_data=ItemBuyCallback(item_id=item['id']).pack()
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    navigation_buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=PaginationCallback(action="prev", page=page-1).pack()
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä—ë–¥", –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if end_idx < len(items):
        navigation_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è",
                callback_data=PaginationCallback(action="next", page=page+1).pack()
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if navigation_buttons:
        builder.row(*navigation_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    builder.row(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í –º–µ–Ω—é",
            callback_data=CancelCallback(action="cancel").pack()
        )
    )

    return builder.as_markup()


def get_item_kb(item_id: Union[int, str]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–º.

    Args:
        item_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞).

    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–º.
    """
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="üõí –ö—É–ø–∏—Ç—å",
            callback_data=BuyingCallback(item_id=item_id).pack()
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω",
            callback_data=MenuCallback(action="price_chart", item_id=item_id).pack()
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å",
            callback_data=DeleteCallback(item_id=item_id).pack()
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data=MenuCallback(action="my_items").pack()
        )
    )

    return builder.as_markup()


def get_confirmation_kb(action: str, item_id: Optional[Union[int, str]] = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.
    
    Args:
        action: –î–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        item_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:yes"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm:no")
    )
    
    return builder.as_markup()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ DM/keyboards.py –∏ DM/custom_keyboards.py
def get_dmarket_main_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è DMarket –±–æ—Ç–∞.
    
    Returns:
        ReplyKeyboardMarkup: –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    buttons = [
        ["üìä –ê–Ω–∞–ª–∏–∑", "üí∞ –¢–æ—Ä–≥–æ–≤–ª—è"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìù –¢–∞—Ä–≥–µ—Ç-–æ—Ä–¥–µ—Ä–∞"],
        ["üîç –ê—Ä–±–∏—Ç—Ä–∞–∂ —Å–∫–∏–Ω–æ–≤", "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω"]
    ]
    return KeyboardFactory.create_reply_keyboard(buttons)

def get_settings_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings:notifications")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚è±Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="settings:frequency")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    
    return builder.as_markup()

def get_analysis_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
    """
    buttons = [
        ["üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"],
        ["üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞", "üéØ –ê—Ä–±–∏—Ç—Ä–∞–∂"],
        ["üìâ –¢—Ä–µ–Ω–¥—ã —Ü–µ–Ω", "‚è±Ô∏è –ò—Å—Ç–æ—Ä–∏—è"],
        ["üîÑ –ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return KeyboardFactory.create_reply_keyboard(buttons)

def get_trading_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ—Ä–≥–æ–≤–ª–∏.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    """
    buttons = [
        ["üõí –ö—É–ø–∏—Ç—å", "üíµ –ü—Ä–æ–¥–∞—Ç—å"],
        ["üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"],
        ["üîñ –¶–µ–ª–µ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
        ["üîÑ –û–±–º–µ–Ω", "üíé –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return KeyboardFactory.create_reply_keyboard(buttons)

def get_item_actions_keyboard(item_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞.
    
    Args:
        item_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"item:buy:{item_id}"),
        InlineKeyboardButton(text="üíµ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"item:sell:{item_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã", callback_data=f"item:analyze:{item_id}"),
        InlineKeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"item:history:{item_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"item:favorite:{item_id}"),
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"item:delete:{item_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    
    return builder.as_markup()

def get_game_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üî´ CS2", callback_data="game:cs2"),
        InlineKeyboardButton(text="üó°Ô∏è Dota 2", callback_data="game:dota2")
    )
    
    builder.row(
        InlineKeyboardButton(text="üèùÔ∏è RUST", callback_data="game:rust"),
        InlineKeyboardButton(text="üéØ Team Fortress 2", callback_data="game:tf2")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    
    return builder.as_markup()

def get_price_range_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    """
    buttons = [
        [
            {"text": "< $1", "command": "price_range", "param": "0_1"},
            {"text": "$1-$5", "command": "price_range", "param": "1_5"},
            {"text": "$5-$10", "command": "price_range", "param": "5_10"}
        ],
        [
            {"text": "$10-$50", "command": "price_range", "param": "10_50"},
            {"text": "$50-$100", "command": "price_range", "param": "50_100"},
            {"text": "$100+", "command": "price_range", "param": "100_999999"}
        ],
        [
            {"text": "–°–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", "command": "price_range", "param": "custom"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_time_period_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    """
    buttons = [
        [
            {"text": "24 —á–∞—Å–∞", "command": "period", "param": "24h"},
            {"text": "7 –¥–Ω–µ–π", "command": "period", "param": "7d"}
        ],
        [
            {"text": "30 –¥–Ω–µ–π", "command": "period", "param": "30d"},
            {"text": "3 –º–µ—Å—è—Ü–∞", "command": "period", "param": "90d"}
        ],
        [
            {"text": "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", "command": "period", "param": "all"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_target_orders_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ü–µ–ª–µ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    """
    buttons = [
        ["üîñ –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä", "üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞"],
        ["üîç –ù–∞–π—Ç–∏ –æ—Ä–¥–µ—Ä", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä"],
        ["üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return KeyboardFactory.create_reply_keyboard(buttons)

def get_target_order_actions_keyboard(order_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å —Ü–µ–ª–µ–≤—ã–º –æ—Ä–¥–µ—Ä–æ–º.
    
    Args:
        order_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–¥–µ—Ä–∞
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ä–¥–µ—Ä–æ–º
    """
    buttons = [
        [
            {"text": "üìù –ò–∑–º–µ–Ω–∏—Ç—å", "command": "edit_order", "param": order_id}
        ],
        [
            {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "command": "cancel_order", "param": order_id},
            {"text": "üìä –°—Ç–∞—Ç—É—Å", "command": "order_status", "param": order_id}
        ],
        [
            {"text": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "command": "order_notify", "param": order_id}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "orders_list", "param": ""}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_target_order_create_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    """
    buttons = [
        [
            {"text": "üõí –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É", "command": "create_buy_limit", "param": ""}
        ],
        [
            {"text": "üí∞ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", "command": "create_sell_limit", "param": ""}
        ],
        [
            {"text": "‚è±Ô∏è –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä", "command": "create_delayed", "param": ""}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "target_orders", "param": ""}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_marketplace_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    """
    buttons = [
        [
            {"text": "üåê DMarket", "command": "marketplace", "param": "dmarket"}
        ],
        [
            {"text": "üéÆ Steam", "command": "marketplace", "param": "steam"},
            {"text": "üéØ CS.Money", "command": "marketplace", "param": "csmoney"}
        ],
        [
            {"text": "üíé BitSkins", "command": "marketplace", "param": "bitskins"},
            {"text": "üíµ Skinport", "command": "marketplace", "param": "skinport"}
        ],
        [
            {"text": "üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ", "command": "marketplace", "param": "compare_all"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_mode_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "üöÄ –ë—ã—Å—Ç—Ä—ã–π", "command": "arb_mode", "param": "fast"}
        ],
        [
            {"text": "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "command": "arb_mode", "param": "balanced"}
        ],
        [
            {"text": "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π", "command": "arb_mode", "param": "safe"}
        ],
        [
            {"text": "‚öôÔ∏è –†—É—á–Ω–æ–π", "command": "arb_mode", "param": "manual"}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "arbitrage_settings", "param": ""}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_auto_trade_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    """
    buttons = [
        [
            {"text": "‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é", "command": "auto_trade", "param": "on"}
        ],
        [
            {"text": "‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "command": "auto_trade", "param": "schedule"}
        ],
        [
            {"text": "üí∞ –õ–∏–º–∏—Ç—ã –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏", "command": "auto_trade", "param": "limits"}
        ],
        [
            {"text": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "command": "auto_trade", "param": "notifications"}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "arbitrage_settings", "param": ""}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_settings_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "üéÆ –ò–≥—Ä–∞", "command": "arb_settings", "param": "game"}
        ],
        [
            {"text": "üí≤ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", "command": "arb_settings", "param": "price_range"}
        ],
        [
            {"text": "üìà –ú–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç", "command": "arb_settings", "param": "min_profit"}
        ],
        [
            {"text": "üåê –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã", "command": "arb_settings", "param": "marketplaces"}
        ],
        [
            {"text": "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏", "command": "arb_settings", "param": "interval"}
        ],
        [
            {"text": "üîÑ –†–µ–∂–∏–º", "command": "arb_settings", "param": "mode"}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "arbitrage_main", "param": ""}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_main_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ì–ª–∞–≤–Ω–∞—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", "command": "arb_start", "param": ""}
        ],
        [
            {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "command": "arb_settings", "param": ""}
        ],
        [
            {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "command": "arb_stats", "param": ""}
        ],
        [
            {"text": "üìú –ò—Å—Ç–æ—Ä–∏—è", "command": "arb_history", "param": ""}
        ],
        [
            {"text": "‚ùì –ü–æ–º–æ—â—å", "command": "arb_help", "param": ""}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_profit_range_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–∏–±—ã–ª–∏.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–∏–±—ã–ª–∏
    """
    buttons = [
        [
            {"text": "> 5%", "command": "profit_range", "param": "5"},
            {"text": "> 10%", "command": "profit_range", "param": "10"}
        ],
        [
            {"text": "> 15%", "command": "profit_range", "param": "15"},
            {"text": "> 20%", "command": "profit_range", "param": "20"}
        ],
        [
            {"text": "> 30%", "command": "profit_range", "param": "30"},
            {"text": "> 50%", "command": "profit_range", "param": "50"}
        ],
        [
            {"text": "–°–≤–æ–π %", "command": "profit_range", "param": "custom"}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "arbitrage_settings", "param": ""}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_control_keyboard(is_running: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º.
    
    Args:
        is_running: –ó–∞–ø—É—â–µ–Ω –ª–∏ –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º
    """
    buttons = []
    
    if is_running:
        buttons.append([
            {"text": "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", "command": "arb_stop", "param": ""}
        ])
    else:
        buttons.append([
            {"text": "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", "command": "arb_start", "param": ""}
        ])
    
    buttons.append([
        {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "command": "arb_refresh", "param": ""}
    ])
    
    buttons.append([
        {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "command": "arb_settings", "param": ""}
    ])
    
    buttons.append([
        {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "command": "arb_stats", "param": ""},
        {"text": "üìú –ò—Å—Ç–æ—Ä–∏—è", "command": "arb_history", "param": ""}
    ])
    
    return KeyboardFactory.create_inline_keyboard(buttons)
