from abc import ABC, abstractmethod
from typing import Any, Dict, Generic, List, Optional, TypeVar, Union
from aiogram.types import InlineKeyboardMarkup

T = TypeVar('T')

class PaginationResult(Generic[T]):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
    
    def __init__(self, items: List[T], total: int, page: int, page_size: int):
        self.items = items
        self.total = total
        self.page = page
        self.page_size = page_size
        self.total_pages = (total + page_size - 1) // page_size if total > 0 else 1
    
    @property
    def has_next(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
        return self.page < self.total_pages
    
    @property
    def has_prev(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
        return self.page > 1


class Paginator(ABC, Generic[T]):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    
    def __init__(self, page_size: int = 10):
        self.page_size = page_size
    
    @abstractmethod
    async def get_page(self, page: int) -> PaginationResult[T]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏."""
        pass
    
    def set_page_size(self, page_size: int) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        if page_size < 1:
            raise ValueError("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        self.page_size = page_size


class MemoryPaginator(Paginator[T]):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏."""
    
    def __init__(self, items: List[T], page_size: int = 10):
        super().__init__(page_size)
        self.items = items
    
    async def get_page(self, page: int) -> PaginationResult[T]:
        if page < 1:
            page = 1
        
        start_idx = (page - 1) * self.page_size
        end_idx = start_idx + self.page_size
        
        page_items = self.items[start_idx:end_idx]
        return PaginationResult(
            items=page_items,
            total=len(self.items),
            page=page,
            page_size=self.page_size
        )


class APIPaginator(Paginator[T]):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å offset/limit."""
    
    def __init__(self, fetch_func, page_size: int = 10, cache_ttl: int = 300):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç API –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä.
        
        Args:
            fetch_func: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è offset, limit –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∫–æ—Ä—Ç–µ–∂ (items, total)
            page_size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            cache_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        super().__init__(page_size)
        self.fetch_func = fetch_func
        self.cache_ttl = cache_ttl
        self.cache = {}
    
    async def get_page(self, page: int) -> PaginationResult[T]:
        if page < 1:
            page = 1
        
        cache_key = f"page_{page}_{self.page_size}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.cache:
            return self.cache[cache_key]
        
        # –í—ã—á–∏—Å–ª—è–µ–º offset
        offset = (page - 1) * self.page_size
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é-–ø—Ä–æ–≤–∞–π–¥–µ—Ä
            items, total = await self.fetch_func(offset, self.page_size)
            
            result = PaginationResult(
                items=items,
                total=total,
                page=page,
                page_size=self.page_size
            )
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache[cache_key] = result
            
            return result
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            import logging
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {str(e)}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return PaginationResult(
                items=[],
                total=0,
                page=page,
                page_size=self.page_size
            )


def create_pagination_keyboard(
    current_page: int,
    total_pages: int,
    callback_prefix: str,
    compact: bool = False
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
        compact: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ "–í –Ω–∞—á–∞–ª–æ"/"–í –∫–æ–Ω–µ—Ü")
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if current_page > 1:
        buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è", callback_data=f"{callback_prefix}:{current_page - 1}"
        ))
    
    if not compact:
        # –ö–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æ"
        if current_page > 2:
            buttons.append(InlineKeyboardButton(
                text="1", callback_data=f"{callback_prefix}:1"
            ))
        
        # –ö–Ω–æ–ø–∫–∞ "..."
        if current_page > 3:
            buttons.append(InlineKeyboardButton(
                text="...", callback_data="noop"
            ))
    
    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    buttons.append(InlineKeyboardButton(
        text=f"{current_page}/{total_pages}", callback_data="noop"
    ))
    
    if not compact:
        # –ö–Ω–æ–ø–∫–∞ "..."
        if current_page < total_pages - 2:
            buttons.append(InlineKeyboardButton(
                text="...", callback_data="noop"
            ))
        
        # –ö–Ω–æ–ø–∫–∞ "–í –∫–æ–Ω–µ—Ü"
        if current_page < total_pages - 1:
            buttons.append(InlineKeyboardButton(
                text=f"{total_pages}", callback_data=f"{callback_prefix}:{total_pages}"
            ))
    
    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    if current_page < total_pages:
        buttons.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è", callback_data=f"{callback_prefix}:{current_page + 1}"
        ))
    
    builder.row(*buttons)
    
    return builder.as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def process_pagination_callback(callback_data: str) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    
    Args:
        callback_data: –°—Ç—Ä–æ–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ "prefix:page"
        
    Returns:
        Dict —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
            - prefix: –ü—Ä–µ—Ñ–∏–∫—Å callback
            - page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    parts = callback_data.split(":")
    if len(parts) < 2:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    
    prefix = parts[0]
    page = int(parts[1])
    
    return {
        "prefix": prefix,
        "page": page
    }


def create_infinite_scroll_keyboard(
    current_page: int,
    has_more: bool,
    callback_prefix: str
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏.
    
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        has_more: –ï—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    """
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
    if has_more:
        builder.row(
            InlineKeyboardButton(
                text="‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ", 
                callback_data=f"{callback_prefix}:{current_page + 1}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
            callback_data=f"{callback_prefix}:1"
        )
    )
    
    return builder.as_markup()


class InfiniteScrollPaginator(Paginator[T]):
    """–ü–∞–≥–∏–Ω–∞—Ç–æ—Ä —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    
    def __init__(self, data_provider, page_size: int = 10, cache_ttl: int = 300):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π.
        
        Args:
            data_provider: –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            cache_ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        super().__init__(page_size)
        self.data_provider = data_provider
        self.cache_ttl = cache_ttl
        self.cache = {}
        self.all_items = []
        self.total_items = 0
        self.last_updated = 0
        
    async def get_page(self, page: int) -> PaginationResult[T]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            
        Returns:
            PaginationResult —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        if page < 1:
            page = 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞
        import time
        current_time = time.time()
        if (current_time - self.last_updated) > self.cache_ttl:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è
            self.all_items = []
            self.total_items = 0
        
        if page == 1:
            # –î–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            self.all_items = []
            self.total_items = 0
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Ä–∞–Ω–µ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞
        if len(self.all_items) >= page * self.page_size:
            start_idx = 0
            end_idx = page * self.page_size
            
            items = self.all_items[:end_idx]
            return PaginationResult(
                items=items,
                total=self.total_items,
                page=page,
                page_size=self.page_size
            )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
            pages_to_load = page - (len(self.all_items) // self.page_size)
            if len(self.all_items) % self.page_size > 0:
                pages_to_load += 1
            
            new_items = []
            for i in range(pages_to_load):
                current_offset = len(self.all_items)
                items, total = await self.data_provider(current_offset, self.page_size)
                
                if total > self.total_items:
                    self.total_items = total
                
                if not items:
                    break
                
                new_items.extend(items)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏, –∑–Ω–∞—á–∏—Ç –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞
                if len(items) < self.page_size:
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            self.all_items.extend(new_items)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.last_updated = current_time
            
            return PaginationResult(
                items=self.all_items,
                total=self.total_items,
                page=page,
                page_size=self.page_size
            )
        except Exception as e:
            import logging
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {str(e)}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ, —á—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            return PaginationResult(
                items=self.all_items,
                total=self.total_items,
                page=page,
                page_size=self.page_size
            )
    
    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        self.all_items = []
        self.total_items = 0
        self.last_updated = 0 