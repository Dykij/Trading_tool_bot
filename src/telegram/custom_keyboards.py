"""
–ú–æ–¥—É–ª—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –¥–ª—è Telegram –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
–¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.
"""
from typing import List, Dict, Any, Union, Optional
import pkg_resources
import logging

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é aiogram
try:
    aiogram_version = pkg_resources.get_distribution("aiogram").version
    IS_AIOGRAM_V2 = aiogram_version.startswith("2.")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º aiogram –≤–µ—Ä—Å–∏–∏: {'v2' if IS_AIOGRAM_V2 else 'v3'}")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ aiogram: {e}")
    IS_AIOGRAM_V2 = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º v2

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏
if IS_AIOGRAM_V2:
    from aiogram.types import (
        ReplyKeyboardMarkup, KeyboardButton, 
        InlineKeyboardMarkup, InlineKeyboardButton
    )
    from aiogram.utils.callback_data import CallbackData
else:
    from aiogram.types import (
        ReplyKeyboardMarkup, KeyboardButton, 
        InlineKeyboardMarkup, InlineKeyboardButton
    )
    from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("keyboards")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º CallbackData –∏–ª–∏ –µ–≥–æ –∞–Ω–∞–ª–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏
if IS_AIOGRAM_V2:
    action_cb = CallbackData("action", "command", "param")
else:
    # –í aiogram v3 –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è callback_data
    def create_callback_data(command: str, param: str = "") -> str:
        return f"action:{command}:{param}"

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π aiogram
class KeyboardFactory:
    @staticmethod
    def create_reply_keyboard(buttons: List[List[str]], resize_keyboard: bool = True) -> ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∫–Ω–æ–ø–æ–∫
            resize_keyboard: –ù—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
        Returns:
            –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        keyboard = []
        for row in buttons:
            keyboard_row = []
            for button_text in row:
                keyboard_row.append(KeyboardButton(text=button_text))
            keyboard.append(keyboard_row)
        
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=resize_keyboard
        )
    
    @staticmethod
    def create_inline_keyboard_v2(buttons: List[List[Dict[str, str]]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è aiogram v2.
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫ (text, callback_data, url)
            
        Returns:
            –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        keyboard = []
        for row in buttons:
            keyboard_row = []
            for button in row:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                text = button.get("text", "")
                command = button.get("command", "")
                param = button.get("param", "")
                url = button.get("url", None)
                callback_data = button.get("callback_data", None)
                
                if url:
                    keyboard_row.append(InlineKeyboardButton(text=text, url=url))
                elif callback_data:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π callback_data, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                    keyboard_row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
                else:
                    # –ò–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º callback_data —á–µ—Ä–µ–∑ CallbackData
                    callback_data = action_cb.new(command=command, param=param)
                    keyboard_row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
            
            keyboard.append(keyboard_row)
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def create_inline_keyboard_v3(buttons: List[List[Dict[str, str]]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è aiogram v3.
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫ (text, command, param, url)
            
        Returns:
            –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        builder = InlineKeyboardBuilder()
        
        for row in buttons:
            row_buttons = []
            for button in row:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                text = button.get("text", "")
                command = button.get("command", "")
                param = button.get("param", "")
                url = button.get("url", None)
                callback_data = button.get("callback_data", None)
                
                if url:
                    row_buttons.append(InlineKeyboardButton(text=text, url=url))
                elif callback_data:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π callback_data, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                    row_buttons.append(InlineKeyboardButton(text=text, callback_data=callback_data))
                else:
                    # –ò–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º callback_data —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
                    callback_data = create_callback_data(command, param)
                    row_buttons.append(InlineKeyboardButton(text=text, callback_data=callback_data))
            
            builder.row(*row_buttons)
        
        return builder.as_markup()
    
    @staticmethod
    def create_inline_keyboard(buttons: List[List[Dict[str, str]]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ aiogram.
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫
            
        Returns:
            –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        if IS_AIOGRAM_V2:
            return KeyboardFactory.create_inline_keyboard_v2(buttons)
        else:
            return KeyboardFactory.create_inline_keyboard_v3(buttons)

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ keyboards.py, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è custom_keyboards.py

def get_main_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            {"text": "üìä –ê—Ä–±–∏—Ç—Ä–∞–∂", "callback_data": "menu:arbitrage"},
            {"text": "üéÆ –ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã", "callback_data": "menu:items"}
        ],
        [
            {"text": "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "callback_data": "menu:investments"},
            {"text": "ü§ñ ML-–∞–Ω–∞–ª–∏–∑", "callback_data": "ml:default"}
        ],
        [
            {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "menu:settings"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_menu_kb() -> InlineKeyboardMarkup:
    """
    –°–∏–Ω–æ–Ω–∏–º –¥–ª—è get_main_keyboard –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    return get_main_keyboard()

def get_game_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    """
    buttons = [
        [
            {"text": "üî´ CS2", "callback_data": "arbitrage:game_a8db"},
            {"text": "üó°Ô∏è Dota 2", "callback_data": "arbitrage:game_9a92"}
        ],
        [
            {"text": "üéÆ Team Fortress 2", "callback_data": "arbitrage:game_tf2"},
            {"text": "‚öîÔ∏è Rust", "callback_data": "arbitrage:game_rust"}
        ],
        [
            {"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_mode_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "callback_data": "arbitrage:mode_auto"},
            {"text": "üë®‚Äçüíª –†—É—á–Ω–æ–π", "callback_data": "arbitrage:mode_manual"}
        ],
        [
            {"text": "‚ö° –ë—ã—Å—Ç—Ä—ã–π", "callback_data": "arbitrage:mode_quick"},
            {"text": "üß† –£–º–Ω—ã–π", "callback_data": "arbitrage:mode_smart"}
        ],
        [
            {"text": "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", "callback_data": "arbitrage:settings"}
        ],
        [
            {"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_item_actions_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    """
    buttons = [
        [
            {"text": "üß∞ –ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "callback_data": "item:inventory"},
            {"text": "üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", "callback_data": "item:search"}
        ],
        [
            {"text": "üëÅÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω", "callback_data": "item:track"},
            {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "item:stats"}
        ],
        [
            {"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_settings_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    buttons = [
        [
            {"text": "üîë API –∫–ª—é—á–∏", "callback_data": "settings:api"},
            {"text": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "callback_data": "settings:notifications"}
        ],
        [
            {"text": "üßÆ –¢–æ—Ä–≥–æ–≤–ª—è", "callback_data": "settings:trading"},
            {"text": "üìù –ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "settings:profile"}
        ],
        [
            {"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_cancel_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    """
    buttons = [
        [
            {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "back"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_budget_input_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞
    """
    buttons = [
        [
            {"text": "$10", "callback_data": "budget:10"},
            {"text": "$50", "callback_data": "budget:50"},
            {"text": "$100", "callback_data": "budget:100"}
        ],
        [
            {"text": "$200", "callback_data": "budget:200"},
            {"text": "$500", "callback_data": "budget:500"},
            {"text": "$1000", "callback_data": "budget:1000"}
        ],
        [
            {"text": "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "callback_data": "budget:custom"}
        ],
        [
            {"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_confirmation_kb(confirm_data: str = "confirm", cancel_data: str = "cancel") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.
    
    Args:
        confirm_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cancel_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    buttons = [
        [
            {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": confirm_data},
            {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": cancel_data}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard_v2() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞ (Reply –≤–µ—Ä—Å–∏—è).
    
    Returns:
        ReplyKeyboardMarkup: –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞
    """
    buttons = [
        ["üìä –ê–Ω–∞–ª–∏–∑", "üí∞ –¢–æ—Ä–≥–æ–≤–ª—è"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìù –¢–∞—Ä–≥–µ—Ç-–æ—Ä–¥–µ—Ä–∞"],
        ["üîç –ê—Ä–±–∏—Ç—Ä–∞–∂ —Å–∫–∏–Ω–æ–≤", "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω"]
    ]
    return KeyboardFactory.create_reply_keyboard(buttons)

def get_settings_keyboard_v2() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ (Reply –≤–µ—Ä—Å–∏—è)."""
    buttons = [
        ["üîë API –∫–ª—é—á–∏"],
        ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üåç –Ø–∑—ã–∫–∏"],
        ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìå –õ–∏–º–∏—Ç—ã"],
        ["üåê –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã", "‚ö° –ê—Ä–±–∏—Ç—Ä–∞–∂"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return KeyboardFactory.create_reply_keyboard(buttons)

def get_analysis_menu_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞."""
    buttons = [
        ["üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"],
        ["üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞", "üéØ –ê—Ä–±–∏—Ç—Ä–∞–∂"],
        ["üìâ –¢—Ä–µ–Ω–¥—ã —Ü–µ–Ω", "‚è±Ô∏è –ò—Å—Ç–æ—Ä–∏—è"],
        ["üîÑ –ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return KeyboardFactory.create_reply_keyboard(buttons)

def get_trading_menu_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ—Ä–≥–æ–≤–ª–∏."""
    buttons = [
        ["üõí –ö—É–ø–∏—Ç—å", "üíµ –ü—Ä–æ–¥–∞—Ç—å"],
        ["üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"],
        ["üîñ –¶–µ–ª–µ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
        ["üîÑ –û–±–º–µ–Ω", "üíé –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return KeyboardFactory.create_reply_keyboard(buttons)

def get_target_orders_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤."""
    buttons = [
        ["üîñ –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä", "üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞"],
        ["üîç –ù–∞–π—Ç–∏ –æ—Ä–¥–µ—Ä", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä"],
        ["üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return KeyboardFactory.create_reply_keyboard(buttons)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_item_actions_keyboard_v2(item_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞.
    
    Args:
        item_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
        
    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    buttons = [
        [
            {"text": "üõí –ö—É–ø–∏—Ç—å", "command": "buy", "param": item_id},
            {"text": "üí∞ –ü—Ä–æ–¥–∞—Ç—å", "command": "sell", "param": item_id}
        ],
        [
            {"text": "üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã", "command": "price_analysis", "param": item_id}
        ],
        [
            {"text": "üìà –ò—Å—Ç–æ—Ä–∏—è", "command": "history", "param": item_id},
            {"text": "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "command": "favorite", "param": item_id}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_confirmation_keyboard(action: str, item_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.
    
    Args:
        action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        item_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
        
    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    buttons = [
        [
            {"text": "‚úÖ –î–∞", "command": f"confirm_{action}", "param": item_id},
            {"text": "‚ùå –ù–µ—Ç", "command": "cancel", "param": ""}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_pagination_keyboard(page: int, total_pages: int, command: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    
    Args:
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è
        
    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    buttons = [[]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page > 1:
        buttons[0].append({"text": "‚óÄÔ∏è", "command": command, "param": str(page - 1)})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    buttons[0].append({"text": f"{page}/{total_pages}", "command": "noop", "param": ""})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page < total_pages:
        buttons[0].append({"text": "‚ñ∂Ô∏è", "command": command, "param": str(page + 1)})
    
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_item_type_keyboard(game_id: str = "cs2"):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.
    
    Args:
        game_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã (cs2, dota2, tf2)
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if game_id == "cs2":
        keyboard.add(
            InlineKeyboardButton("üî™ –ù–æ–∂–∏", callback_data="item_type:knife"),
            InlineKeyboardButton("üß§ –ü–µ—Ä—á–∞—Ç–∫–∏", callback_data="item_type:gloves"),
            InlineKeyboardButton("üî´ –í–∏–Ω—Ç–æ–≤–∫–∏", callback_data="item_type:rifle"),
            InlineKeyboardButton("üî´ –ü–∏—Å—Ç–æ–ª–µ—Ç—ã", callback_data="item_type:pistol"),
            InlineKeyboardButton("üè∑Ô∏è –°—Ç–∏–∫–µ—Ä—ã", callback_data="item_type:sticker"),
            InlineKeyboardButton("üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", callback_data="item_type:container"),
            InlineKeyboardButton("üîç –î—Ä—É–≥–æ–µ", callback_data="item_type:other"),
            InlineKeyboardButton("üåü –í—Å–µ —Ç–∏–ø—ã", callback_data="item_type:all")
        )
    elif game_id == "dota2":
        keyboard.add(
            InlineKeyboardButton("üëë –ê—Ä–∫–∞–Ω–∞", callback_data="item_type:arcana"),
            InlineKeyboardButton("üó°Ô∏è –ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–µ", callback_data="item_type:immortal"),
            InlineKeyboardButton("üßô –ö—É—Ä—å–µ—Ä—ã", callback_data="item_type:courier"),
            InlineKeyboardButton("üé≠ –°–µ—Ç—ã", callback_data="item_type:set"),
            InlineKeyboardButton("üîç –î—Ä—É–≥–æ–µ", callback_data="item_type:other"),
            InlineKeyboardButton("üåü –í—Å–µ —Ç–∏–ø—ã", callback_data="item_type:all")
        )
    elif game_id == "tf2":
        keyboard.add(
            InlineKeyboardButton("üé© –®–ª—è–ø—ã", callback_data="item_type:hat"),
            InlineKeyboardButton("üî´ –û—Ä—É–∂–∏–µ", callback_data="item_type:weapon"),
            InlineKeyboardButton("üé≠ –ù–µ–æ–±—ã—á–Ω—ã–µ", callback_data="item_type:unusual"),
            InlineKeyboardButton("üîç –î—Ä—É–≥–æ–µ", callback_data="item_type:other"),
            InlineKeyboardButton("üåü –í—Å–µ —Ç–∏–ø—ã", callback_data="item_type:all")
        )
    
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back:game_selection"))
    
    return keyboard

def get_analysis_inline_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    keyboard.add(
        InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂", callback_data="analysis:find_arbitrage"),
        InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", callback_data="analysis:market_analysis"),
        InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É", callback_data="analysis:select_game"),
        InlineKeyboardButton("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞", callback_data="analysis:settings"),
        InlineKeyboardButton("üì¶ –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data="analysis:select_item_type"),
        InlineKeyboardButton("üí∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="analysis:set_budget"),
        InlineKeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data="analysis:price_history"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")
    )
    
    return keyboard

def get_trading_inline_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    keyboard.add(
        InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç", callback_data="trading:search_item"),
        InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="trading:buy_item"),
        InlineKeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="trading:inventory"),
        InlineKeyboardButton("üè∑Ô∏è –í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", callback_data="trading:sell_item"),
        InlineKeyboardButton("‚ùå –°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏", callback_data="trading:cancel_sale"),
        InlineKeyboardButton("üí± –ê—Ä–±–∏—Ç—Ä–∞–∂ –≤ DMarket", callback_data="trading:dmarket_arbitrage"),
        InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É", callback_data="trading:select_game"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")
    )
    
    return keyboard

def get_dmarket_arbitrage_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤ DMarket.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤ DMarket
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    keyboard.add(
        InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂ –≤ CS2", callback_data="dmarket_arbitrage:cs2"),
        InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂ –≤ Dota 2", callback_data="dmarket_arbitrage:dota2"),
        InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂ –≤ TF2", callback_data="dmarket_arbitrage:tf2"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞", callback_data="dmarket_arbitrage:settings"),
        InlineKeyboardButton("üí∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="dmarket_arbitrage:budget"),
        InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É", callback_data="dmarket_arbitrage:report"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back:trading")
    )
    
    return keyboard

def get_arbitrage_params_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    keyboard.add(
        InlineKeyboardButton("üíµ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: 1%", callback_data="arbitrage_settings:profit:1"),
        InlineKeyboardButton("üíµ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: 3%", callback_data="arbitrage_settings:profit:3"),
        InlineKeyboardButton("üíµ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: 5%", callback_data="arbitrage_settings:profit:5"),
        InlineKeyboardButton("üíµ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: 10%", callback_data="arbitrage_settings:profit:10"),
        InlineKeyboardButton("üí∞ –ú–∏–Ω. —Ü–µ–Ω–∞: $1", callback_data="arbitrage_settings:min_price:1"),
        InlineKeyboardButton("üí∞ –ú–∏–Ω. —Ü–µ–Ω–∞: $5", callback_data="arbitrage_settings:min_price:5"),
        InlineKeyboardButton("üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: $100", callback_data="arbitrage_settings:max_price:100"),
        InlineKeyboardButton("üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: $500", callback_data="arbitrage_settings:max_price:500"),
        InlineKeyboardButton("üî¢ –õ–∏–º–∏—Ç: 50", callback_data="arbitrage_settings:limit:50"),
        InlineKeyboardButton("üî¢ –õ–∏–º–∏—Ç: 100", callback_data="arbitrage_settings:limit:100"),
        InlineKeyboardButton("üî¢ –õ–∏–º–∏—Ç: 200", callback_data="arbitrage_settings:limit:200"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back:dmarket_arbitrage")
    )
    
    return keyboard

def get_rarity_keyboard(game_id: str = "cs2"):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.
    
    Args:
        game_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã (cs2, dota2, tf2)
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if game_id == "cs2":
        keyboard.add(
            InlineKeyboardButton("üü• –¢–∞–π–Ω–æ–µ", callback_data="rarity:covert"),
            InlineKeyboardButton("üü™ –ó–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω–æ–µ", callback_data="rarity:classified"),
            InlineKeyboardButton("üü¶ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ", callback_data="rarity:restricted"),
            InlineKeyboardButton("üü© –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ", callback_data="rarity:industrial"),
            InlineKeyboardButton("üü® –®–∏—Ä–ø–æ—Ç—Ä–µ–±", callback_data="rarity:consumer"),
            InlineKeyboardButton("üåü –í—Å–µ —Ä–µ–¥–∫–æ—Å—Ç–∏", callback_data="rarity:all")
        )
    elif game_id == "dota2":
        keyboard.add(
            InlineKeyboardButton("üî¥ –ê—Ä–∫–∞–Ω–∞", callback_data="rarity:arcana"),
            InlineKeyboardButton("üü† –î—Ä–µ–≤–Ω–µ–µ", callback_data="rarity:ancient"),
            InlineKeyboardButton("üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ", callback_data="rarity:legendary"),
            InlineKeyboardButton("üü¢ –ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ", callback_data="rarity:mythical"),
            InlineKeyboardButton("üîµ –†–µ–¥–∫–æ–µ", callback_data="rarity:rare"),
            InlineKeyboardButton("üü£ –ù–µ–æ–±—ã—á–Ω–æ–µ", callback_data="rarity:uncommon"),
            InlineKeyboardButton("‚ö™ –û–±—ã—á–Ω–æ–µ", callback_data="rarity:common"),
            InlineKeyboardButton("üåü –í—Å–µ —Ä–µ–¥–∫–æ—Å—Ç–∏", callback_data="rarity:all")
        )
    elif game_id == "tf2":
        keyboard.add(
            InlineKeyboardButton("üü£ –ù–µ–æ–±—ã—á–Ω–æ–µ", callback_data="rarity:unusual"),
            InlineKeyboardButton("üü° –ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ–µ", callback_data="rarity:genuine"),
            InlineKeyboardButton("üü† –°—Ç—Ä–∞–Ω–Ω–æ–µ", callback_data="rarity:strange"),
            InlineKeyboardButton("üîµ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ", callback_data="rarity:unique"),
            InlineKeyboardButton("üåü –í—Å–µ —Ä–µ–¥–∫–æ—Å—Ç–∏", callback_data="rarity:all")
        )
    
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back:item_type"))
    
    return keyboard

# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_price_range_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    """
    buttons = [
        [
            {"text": "$0-10", "command": "price", "param": "0_10"},
            {"text": "$10-50", "command": "price", "param": "10_50"}
        ],
        [
            {"text": "$50-100", "command": "price", "param": "50_100"},
            {"text": "$100-500", "command": "price", "param": "100_500"}
        ],
        [
            {"text": "$500+", "command": "price", "param": "500_0"},
            {"text": "–õ—é–±–∞—è", "command": "price", "param": "any"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_time_period_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    """
    buttons = [
        [
            {"text": "24 —á–∞—Å–∞", "command": "period", "param": "24h"},
            {"text": "7 –¥–Ω–µ–π", "command": "period", "param": "7d"},
            {"text": "30 –¥–Ω–µ–π", "command": "period", "param": "30d"}
        ],
        [
            {"text": "3 –º–µ—Å—è—Ü–∞", "command": "period", "param": "3m"},
            {"text": "–ì–æ–¥", "command": "period", "param": "1y"},
            {"text": "–í—Å–µ –≤—Ä–µ–º—è", "command": "period", "param": "all"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_target_order_actions_keyboard(order_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å —Ü–µ–ª–µ–≤—ã–º –æ—Ä–¥–µ—Ä–æ–º.
    
    Args:
        order_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä–¥–µ—Ä–∞
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ä–¥–µ—Ä–æ–º
    """
    buttons = [
        [
            {"text": "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", "command": "execute_order", "param": order_id},
            {"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "command": "cancel_order", "param": order_id}
        ],
        [
            {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "command": "stats_order", "param": order_id},
            {"text": "‚è±Ô∏è –ò—Å—Ç–æ—Ä–∏—è", "command": "history_order", "param": order_id}
        ],
        [
            {"text": "üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", "command": "details_order", "param": order_id}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_target_order_create_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    """
    buttons = [
        [
            {"text": "üí∞ –ü–æ —Ü–µ–Ω–µ", "command": "create_order", "param": "price"},
            {"text": "üìä –ü–æ —Ç—Ä–µ–Ω–¥—É", "command": "create_order", "param": "trend"}
        ],
        [
            {"text": "üîÑ –ò–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞", "command": "create_order", "param": "arbitrage"},
            {"text": "‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ä–¥–µ—Ä", "command": "create_order", "param": "quick"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_target_order_monitor_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–ª–µ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    buttons = [
        [
            {"text": "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", "command": "monitor", "param": "start"},
            {"text": "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "command": "monitor", "param": "stop"}
        ],
        [
            {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "command": "monitor", "param": "settings"},
            {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "command": "monitor", "param": "stats"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º
def get_marketplace_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∫–∏
    """
    buttons = [
        [
            {"text": "üü™ DMarket", "command": "market", "param": "dmarket"},
            {"text": "üü• Bitskins", "command": "market", "param": "bitskins"}
        ],
        [
            {"text": "üü¶ Backpack.tf", "command": "market", "param": "backpack"},
            {"text": "üü© Total CS", "command": "market", "param": "totalcs"}
        ],
        [
            {"text": "üü® CS.Money", "command": "market", "param": "csmoney"},
            {"text": "üüß –í—Å–µ –ø–ª–æ—â–∞–¥–∫–∏", "command": "market", "param": "all"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_auto_trade_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
    """
    buttons = [
        [
            {"text": "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", "command": "autotrade", "param": "start"},
            {"text": "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "command": "autotrade", "param": "stop"}
        ],
        [
            {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "command": "autotrade", "param": "stats"},
            {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "command": "autotrade", "param": "settings"}
        ],
        [
            {"text": "üìà –ò—Å—Ç–æ—Ä–∏—è", "command": "autotrade", "param": "history"},
            {"text": "üìã –û—Ç—á–µ—Ç", "command": "autotrade", "param": "report"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API
API_DOCS = {
    "bitskins": "https://bitskins.com/ru/docs/api",
    "totalcs": "https://totalcsgo.com/launch-options",
    "backpack": "https://backpack.tf/api/index.html", 
    "dmarket": "https://docs.dmarket.com/v1/swagger.html",
    "telegram": "https://core.telegram.org/bots/api"
}

def get_arbitrage_main_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É (–†–µ–∂–∏–º 1)", "command": "arbitrage", "param": "mode1_game"}
        ],
        [
            {"text": "üåê –í—Å–µ –∏–≥—Ä—ã (–†–µ–∂–∏–º 2)", "command": "arbitrage", "param": "mode2_all"}
        ],
        [
            {"text": "üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç", "command": "arbitrage", "param": "set_budget"}
        ],
        [
            {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞", "command": "arbitrage", "param": "settings"}
        ],
        [
            {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞", "command": "arbitrage", "param": "stats"}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "back", "param": "main"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_game_selection_for_arbitrage() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–†–µ–∂–∏–º 1).
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "üéÆ CS2", "command": "arbitrage_game", "param": "a8db"}
        ],
        [
            {"text": "üèÜ Dota 2", "command": "arbitrage_game", "param": "9a92"}
        ],
        [
            {"text": "üéØ TF2", "command": "arbitrage_game", "param": "tf2"}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "back", "param": "arbitrage_main"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_profit_range_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–∏–±—ã–ª–∏
    """
    buttons = [
        [
            {"text": "$1-$5", "command": "profit_range", "param": "low"}
        ],
        [
            {"text": "$5-$10", "command": "profit_range", "param": "medium"}
        ],
        [
            {"text": "$10-$20", "command": "profit_range", "param": "high"}
        ],
        [
            {"text": "$20-$50", "command": "profit_range", "param": "very_high"}
        ],
        [
            {"text": "$50-$100", "command": "profit_range", "param": "extreme"}
        ],
        [
            {"text": "üîô –ù–∞–∑–∞–¥", "command": "back", "param": "arbitrage_menu"}
        ]
    ]
    
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_game_selection_for_arbitrage_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    """
    buttons = [
        [
            {"text": "üéÆ CS2", "command": "arbitrage_game", "param": "cs2"}
        ],
        [
            {"text": "üßô‚Äç‚ôÇÔ∏è Dota 2", "command": "arbitrage_game", "param": "dota2"}
        ],
        [
            {"text": "üé≠ TF2", "command": "arbitrage_game", "param": "tf2"}
        ],
        [
            {"text": "üîÑ –í—Å–µ –∏–≥—Ä—ã", "command": "arbitrage_game", "param": "all"}
        ],
        [
            {"text": "üîô –ù–∞–∑–∞–¥", "command": "back", "param": "arbitrage_menu"}
        ]
    ]
    
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_mode_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "üéØ –û–¥–Ω–∞ –∏–≥—Ä–∞", "command": "arbitrage_mode", "param": "single_game"}
        ],
        [
            {"text": "üîç –í—Å–µ –∏–≥—Ä—ã", "command": "arbitrage_mode", "param": "all_games"}
        ],
        [
            {"text": "üîô –ù–∞–∑–∞–¥", "command": "back", "param": "main_menu"}
        ]
    ]
    
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_control_keyboard(is_running: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.
    
    Args:
        is_running: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º
    """
    buttons = [
        [
            {"text": "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if is_running else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", 
             "command": "arbitrage_control", 
             "param": "stop" if is_running else "start"}
        ],
        [
            {"text": "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å", "command": "arbitrage_control", "param": "status"}
        ],
        [
            {"text": "üìú –û—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã–ª–∏", "command": "arbitrage_control", "param": "profit_report"}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "back", "param": "arbitrage_main"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_games_selection_keyboard(selected_games: list = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–¥–µ–ª–µ–Ω–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä.
    
    Args:
        selected_games: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏
    """
    if selected_games is None:
        selected_games = []
    
    # –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –∏—Ö emoji
    games = {
        "cs2": "üéÆ CS2",
        "dota2": "üßô‚Äç‚ôÇÔ∏è Dota 2",
        "tf2": "üé≠ TF2",
        "rust": "‚öîÔ∏è Rust"
    }
    
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
    for game_id, game_name in games.items():
        # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É
        prefix = "‚úÖ " if game_id in selected_games else ""
        buttons.append([
            {"text": f"{prefix}{game_name}", "command": "toggle_game", "param": game_id}
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –∏–≥—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
    buttons.append([
        {"text": "‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", "command": "select_all_games", "param": "all"}
    ])
    
    buttons.append([
        {"text": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä", "command": "save_game_selection", "param": "save"}
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "back", "param": "arbitrage_main"}
    ])
    
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_execution_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", "command": "arbitrage_exec", "param": "start"}
        ],
        [
            {"text": "üîß –ò–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç", "command": "arbitrage_exec", "param": "budget"}
        ],
        [
            {"text": "üéÆ –ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä—ã", "command": "arbitrage_exec", "param": "games"}
        ],
        [
            {"text": "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", "command": "arbitrage_exec", "param": "mode"}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "back", "param": "arbitrage_main"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_results_keyboard(current_page: int = 1, total_pages: int = 1) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "command": "arbitrage_results", "param": "stats"}
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if total_pages > 1:
        pagination_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if current_page > 1:
            pagination_buttons.append(
                {"text": "‚è™ –ü—Ä–µ–¥—ã–¥—É—â–∞—è", "command": "arbitrage_page", "param": "prev"}
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if current_page < total_pages:
            pagination_buttons.append(
                {"text": "‚è© –°–ª–µ–¥—É—é—â–∞—è", "command": "arbitrage_page", "param": "next"}
            )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_info = [{"text": f"üìÑ {current_page}/{total_pages}", "command": "none", "param": "none"}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        buttons.append(pagination_buttons)
        buttons.append(page_info)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons.append([
        {"text": "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", "command": "arbitrage_exec", "param": "start"}
    ])
    
    buttons.append([
        {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "back", "param": "arbitrage_main"}
    ])
    
    return KeyboardFactory.create_inline_keyboard(buttons)

def get_arbitrage_settings_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    buttons = [
        [
            {"text": "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º", "command": "arbitrage_setting", "param": "auto_mode"}
        ],
        [
            {"text": "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (5 –º–∏–Ω)", "command": "arbitrage_setting", "param": "check_interval"}
        ],
        [
            {"text": "üì¶ –ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (10)", "command": "arbitrage_setting", "param": "max_trades"}
        ],
        [
            {"text": "üíµ –ú–∏–Ω. –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (0.5)", "command": "arbitrage_setting", "param": "min_liquidity"}
        ],
        [
            {"text": "üìà –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "command": "arbitrage_setting", "param": "notifications"}
        ],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "command": "back", "param": "arbitrage_main"}
        ]
    ]
    return KeyboardFactory.create_inline_keyboard(buttons) 