"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ DMarket.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
"""

import asyncio
import logging
import os
import sys
import types
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–∑—É
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –≤ PYTHONPATH –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

# –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
class BotMetrics:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫"""
        self.commands_count = 0
        self.callbacks_count = 0
        self.errors_count = 0
        self.user_sessions = {}
        self.start_time = datetime.now()
        self.requests_by_user = {}
        self.requests_by_command = {}
        self.requests_timeline = []
        
    def log_command(self, user_id, command):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        self.commands_count += 1
        self._register_request(user_id, command)
        
    def log_callback(self, user_id, callback_data):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback"""
        self.callbacks_count += 1
        self._register_request(user_id, callback_data, is_callback=True)
        
    def log_error(self, user_id=None, details=None):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        self.errors_count += 1
        if user_id:
            if user_id not in self.requests_by_user:
                self.requests_by_user[user_id] = {"commands": 0, "callbacks": 0, "errors": 0}
            self.requests_by_user[user_id]["errors"] += 1
            
    def _register_request(self, user_id, request_data, is_callback=False):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_id not in self.requests_by_user:
            self.requests_by_user[user_id] = {"commands": 0, "callbacks": 0, "errors": 0}
            
        if is_callback:
            self.requests_by_user[user_id]["callbacks"] += 1
        else:
            self.requests_by_user[user_id]["commands"] += 1
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞
        key = request_data.split()[0] if not is_callback else request_data.split(':')[0]
        if key not in self.requests_by_command:
            self.requests_by_command[key] = 0
        self.requests_by_command[key] += 1
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ (–∫–∞–∂–¥—ã–π —á–∞—Å)
        current_hour = datetime.now().replace(minute=0, second=0, microsecond=0)
        for period in self.requests_timeline:
            if period["time"] == current_hour:
                period["count"] += 1
                return
                
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–π —á–∞—Å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        self.requests_timeline.append({"time": current_hour, "count": 1})
        
    def get_uptime(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        uptime = datetime.now() - self.start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        return f"{days}d {hours}h {minutes}m {seconds}s"
        
    def get_summary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫"""
        return {
            "uptime": self.get_uptime(),
            "total_commands": self.commands_count,
            "total_callbacks": self.callbacks_count,
            "total_errors": self.errors_count,
            "unique_users": len(self.requests_by_user),
            "top_commands": sorted(self.requests_by_command.items(), key=lambda x: x[1], reverse=True)[:5],
            "top_users": sorted(self.requests_by_user.items(), key=lambda x: sum(x[1].values()), reverse=True)[:5],
        }
        
    def format_summary(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        summary = self.get_summary()
        top_commands_text = "\n".join([f"  {cmd}: {count}" for cmd, count in summary["top_commands"]])
        top_users_text = "\n".join([f"  ID {user_id}: {sum(stats.values())} –∑–∞–ø—Ä–æ—Å–æ–≤" for user_id, stats in summary["top_users"]])
        
        return (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {summary['uptime']}\n"
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {summary['unique_users']}\n\n"
            f"üìù –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {summary['total_commands']}\n"
            f"üîÑ –í—Å–µ–≥–æ –∫–æ–ª–±—ç–∫–æ–≤: {summary['total_callbacks']}\n"
            f"‚ö†Ô∏è –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {summary['total_errors']}\n\n"
            f"üîù <b>–°–∞–º—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n{top_commands_text}\n\n"
            f"üë§ <b>–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n{top_users_text}"
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
bot_metrics = BotMetrics()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
try:
    import aiogram
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.contrib.fsm_storage.redis import RedisStorage2
    from aiogram.contrib.fsm_storage.memory import MemoryStorage
    from aiogram.contrib.middlewares.logging import LoggingMiddleware
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ aiogram: {e}")
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ aiogram: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from src.telegram.decorators import track_command, track_callback, set_metrics

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
set_metrics(bot_metrics)

# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç aioredis - –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ RedisStorage2 –∏–∑ aiogram
# –≠—Ç–æ –æ–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º TimeoutError
redis_available = False
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from src.config.config import Config, setup_logging
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ bool
    def safe_str_to_bool(value, default=False):
        if isinstance(value, bool):
            return value
        if isinstance(value, str):
            value = value.lower().strip()
            if value in ('true', 't', '1', 'yes', 'y'):
                return True
            elif value in ('false', 'f', '0', 'no', 'n'):
                return False
        return default
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ Redis –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    redis_url = getattr(Config, 'REDIS_URL', None)
    use_redis_str = os.getenv("USE_REDIS", "false")
    use_redis = safe_str_to_bool(use_redis_str, False)
    
    redis_available = bool(redis_url) and use_redis
    
    if redis_available:
        logger.info(f"Redis –≤–∫–ª—é—á–µ–Ω: {redis_url}")
    else:
        logger.info(f"Redis –æ—Ç–∫–ª—é—á–µ–Ω. URL: {redis_url}, USE_REDIS: {use_redis_str} -> {use_redis}")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Redis: {e}")
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Redis: {e}")
    print("Redis –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è ml_predictor
def create_ml_predictor_stub():
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –º–æ–¥—É–ª—è ml_predictor.
    
    Returns:
        types.ModuleType: –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è ml_predictor
    """
    ml_module = types.ModuleType('ml_predictor')
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∫–ª–∞—Å—Å–∞ MLPredictor
    class DummyMLPredictor:
        def __init__(self, *args, **kwargs):
            logger.warning("–í—ã–∑–≤–∞–Ω –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≥–ª—É—à–∫–∏ MLPredictor")
            
        def train_model(self, *args, **kwargs):
            logger.warning("–í—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –∑–∞–≥–ª—É—à–∫–∏ train_model")
            return None
            
        def predict_price(self, *args, **kwargs):
            logger.warning("–í—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –∑–∞–≥–ª—É—à–∫–∏ predict_price")
            return 0.0
            
        def find_investment_opportunities(self, *args, **kwargs):
            logger.warning("–í—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –∑–∞–≥–ª—É—à–∫–∏ find_investment_opportunities")
            return []
    
    ml_module.MLPredictor = DummyMLPredictor
    logger.info("–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è ml_predictor.MLPredictor —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
    return ml_module

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –º–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    from src.bot.handlers.commands import register_command_handlers
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
    from src.telegram.callbacks import register_callback_handlers
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    from src.trading.trading_facade import get_trading_service
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    from src.db.init_db import init_db, close_db
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    from src.telegram.keyboards import (
        get_main_keyboard,
        get_menu_kb,
        get_cancel_kb,
        get_confirmation_kb,
        get_game_selection_keyboard,
        get_item_actions_keyboard,
        get_settings_keyboard
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ml_predictor
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
        if 'ml_predictor' in sys.modules:
            import ml_predictor
            logger.info("–ú–æ–¥—É–ª—å ml_predictor —É–∂–µ –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
        else:
            # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ src.ml
            try:
                import src.ml.ml_predictor as ml_predictor
                sys.modules['ml_predictor'] = sys.modules['src.ml.ml_predictor']
                logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å src.ml.ml_predictor")
            except ImportError:
                # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ DM
                try:
                    import DM.ml_predictor as ml_predictor
                    sys.modules['ml_predictor'] = sys.modules['DM.ml_predictor']
                    logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å DM.ml_predictor")
                except ImportError as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å ml_predictor: {e}")
                    sys.modules['ml_predictor'] = create_ml_predictor_stub()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ ml_predictor: {e}")
        if 'ml_predictor' not in sys.modules:
            sys.modules['ml_predictor'] = create_ml_predictor_stub()
        
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞: {e}")
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞: {e}")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤.")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é is_admin –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
from src.telegram.admin_manager import is_admin, get_admin_ids, update_admin_cache

# –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
logger = setup_logging()
logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

# –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    bot_token = getattr(Config, 'TELEGRAM_BOT_TOKEN', os.getenv('TELEGRAM_BOT_TOKEN', ''))
    if not bot_token:
        logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        print("–û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = Bot(token=bot_token)
    logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.critical(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞: {e}")
    print(f"–û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞: {e}")
    sys.exit(1)

# –í—ã–±–∏—Ä–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
if redis_available:
    try:
        # –ü–∞—Ä—Å–∏–º URL Redis
        redis_url = Config.REDIS_URL
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RedisStorage2 –∏–∑ aiogram –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if ":" in redis_url and "/" in redis_url:
            # Parse redis://host:port/db format
            redis_parts = redis_url.replace("redis://", "").split("/")
            host_port = redis_parts[0].split(":")
            host = host_port[0]
            port = int(host_port[1]) if len(host_port) > 1 else 6379
            db = int(redis_parts[1]) if len(redis_parts) > 1 else 0
            
            storage = RedisStorage2(
                host=host,
                port=port,
                db=db,
                prefix="dmarket_bot_fsm"
            )
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {host}:{port}/{db}")
        else:
            # Fallback to default
            storage = RedisStorage2(prefix="dmarket_bot_fsm")
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Redis: {e}")
        storage = MemoryStorage()
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Redis")
else:
    # –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
    storage = MemoryStorage()
    logger.warning("Redis –æ—Ç–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ (–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(bot, storage=storage)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
dp.middleware.setup(LoggingMiddleware())

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
try:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    register_command_handlers(dp)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö
async def send_price_notification(user_id: int, item_name: str, current_price: float, profit_percent: float):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        item_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        current_price (float): –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        profit_percent (float): –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
    """
    try:
        await bot.send_message(
            user_id,
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ</b>\n\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: <b>{item_name}</b>\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>{current_price:.2f}</code> USD\n"
            f"–ü—Ä–∏–±—ã–ª—å: <code>{profit_percent:.2f}%</code>\n\n"
            f"–¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!",
            parse_mode="HTML"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {item_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
@track_command
async def cmd_start_universal(message: types.Message, **kwargs):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        **kwargs: –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∞–ª–∏–¥–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not message:
            logger.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç message –≤ cmd_start_universal")
            return
        
        user_name = message.from_user.first_name if hasattr(message, 'from_user') and hasattr(message.from_user, 'first_name') else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_id = message.from_user.id if hasattr(message, 'from_user') and hasattr(message.from_user, 'id') else "unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
        state = kwargs.get('state', None)
        if state is not None and hasattr(state, 'finish'):
            try:
                await state.finish()
                logger.info(f"–°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ cmd_start_universal: {e}")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        welcome_message = (
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b>\n\n"
            f"ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DMarket Trading.\n\n"
            f"üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            f"‚Ä¢ –ê—Ä–±–∏—Ç—Ä–∞–∂ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
            f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏\n"
            f"‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_menu_kb()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            welcome_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}", exc_info=True)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            if message and hasattr(message, 'answer'):
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
                )
        except Exception as reply_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}", exc_info=True)

@track_command
async def cmd_help(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    help_text = (
        "üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/arbitrage - –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é\n"
        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º\n\n"
        "<b>–ê—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "‚Ä¢ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_menu_kb()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        help_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@track_command
async def cmd_status(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    status_text = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
        "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {bot_metrics.get_uptime()}\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(bot_metrics.requests_by_user)}\n\n"
        "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_menu_kb()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        status_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@track_command
async def cmd_stats(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(message.from_user.id):
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = bot_metrics.format_summary()
    await message.answer(stats_text, parse_mode="HTML")

@track_command
async def cmd_restart(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /restart - –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = message.from_user.id if hasattr(message, 'from_user') and hasattr(message.from_user, 'id') else "unknown"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        from src.telegram.run_bot import restart_bot
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        async def delayed_restart():
            await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            restart_bot()
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        asyncio.create_task(delayed_restart())
        
    except ImportError:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é restart_bot")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ. –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é monitor_health, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def monitor_health():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
    –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞.
    """
    logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)")
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é on_startup
async def on_startup(dispatcher: Dispatcher):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    
    Args:
        dispatcher (Dispatcher): –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    startup_status = {
        "db_initialized": False,
        "monitoring_started": False
    }
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            await init_db()
            startup_status["db_initialized"] = True
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_error}", exc_info=True)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
        try:
            asyncio.create_task(monitor_health())
            startup_status["monitoring_started"] = True
            logger.info("–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞")
        except Exception as monitor_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {monitor_error}", exc_info=True)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        try:
            bot_info = await bot.get_me()
            logger.info(f"–ë–æ—Ç @{bot_info.username} (ID: {bot_info.id}) —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            
        except Exception as bot_info_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {bot_info_error}", exc_info=True)
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)

async def on_shutdown(dispatcher: Dispatcher):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
    
    Args:
        dispatcher (Dispatcher): –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –±–æ—Ç–∞
    """
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await close_db()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

def start_bot():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞.
    
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        is_valid, errors = validate_config()
        if not is_valid:
            error_str = "\n".join(errors)
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{error_str}")
            print(f"–û–®–ò–ë–ö–ê: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{error_str}")
            sys.exit(1)
            
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö
        # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        try:
            dp.message_handlers.clear()
            dp.callback_query_handlers.clear()
            logger.info("–û—á–∏—â–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
        except Exception as clear_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {clear_error}", exc_info=True)
        
        # –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            from src.telegram.decorators import set_metrics, track_command, track_callback
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            set_metrics(bot_metrics)
            logger.info("–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –º–µ—Ç—Ä–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ track_command
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
            async def test_command_handler(message):
                pass
            decorated_test = track_command(test_command_handler)
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ track_command —É—Å–ø–µ—à–Ω–∞")
            
        except Exception as decorator_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: {decorator_error}", exc_info=True)
            sys.exit(1)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:
        # 1. –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ commands.py
        try:
            from src.bot.handlers.commands import register_command_handlers
            register_command_handlers(dp)
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ commands.py –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as handler_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏–∑ commands.py: {handler_error}", exc_info=True)
            logger.warning("–ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        
        # 2. –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
        try:
            from src.telegram.callbacks import register_callback_handlers
            register_callback_handlers(dp)
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as callback_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–±—ç–∫–æ–≤: {callback_error}", exc_info=True)
            logger.warning("–ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–±—ç–∫–æ–≤")
        
        # 3. –ù–∞–∫–æ–Ω–µ—Ü, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
        try:
            register_handlers(dp)
            logger.info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ telegram_bot.py –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as handler_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {handler_error}", exc_info=True)
            logger.warning("–ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        try:
            dp.register_errors_handler(handle_global_exception, exception=Exception)
            logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
        except Exception as error_handler_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: {error_handler_error}", exc_info=True)
            logger.warning("–û—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ –Ω–µ –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è!")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        send_admin_notification.bot = bot
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –∑–∞–ø—É—Å–∫–µ
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {bot_token[:5]}...{bot_token[-5:]} (—Å–∫—Ä—ã—Ç)")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {storage.__class__.__name__}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            executor.start_polling(
                dp,
                on_startup=on_startup,
                on_shutdown=on_shutdown,
                skip_updates=True
            )
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as polling_error:
            logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞: {polling_error}", exc_info=True)
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê: {polling_error}")
            sys.exit(1)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

# –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    start_bot()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def get_config_value(key, default=None, config_obj=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫.
    
    Args:
        key (str): –ö–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
        config_obj: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Config)
    
    Returns:
        –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    try:
        if config_obj is None:
            config_obj = Config
        
        return getattr(config_obj, key, os.getenv(key, default))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {key}: {e}")
        return default

def validate_config():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    Returns:
        tuple: (bool, list) - (—É—Å–ø–µ—Ö, —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
    """
    errors = []
    warnings = []
    success_items = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
    try:
        bot_token = get_config_value('TELEGRAM_BOT_TOKEN', '')
        if not bot_token:
            errors.append("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        elif len(bot_token) < 30:  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞
            errors.append("TELEGRAM_BOT_TOKEN –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π)")
        else:
            success_items.append("TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TELEGRAM_BOT_TOKEN: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö ID (–Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    try:
        admin_ids = get_admin_ids()
        if not admin_ids:
            warnings.append("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ ADMIN_CHAT_ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
            admin_chat_id = os.getenv("ADMIN_CHAT_ID", "")
            if admin_chat_id:
                os.environ["ADMIN_IDS"] = admin_chat_id
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
                update_admin_cache()
                success_items.append(f"ADMIN_IDS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ ADMIN_CHAT_ID: {admin_chat_id}")
                logger.warning(f"ADMIN_IDS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ ADMIN_CHAT_ID: {admin_chat_id}")
        else:
            success_items.append(f"ADMIN_IDS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {len(admin_ids)} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID")
    except Exception as e:
        warnings.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ADMIN_IDS: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis URL –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Redis
    try:
        use_redis = safe_str_to_bool(os.getenv("USE_REDIS", "false"))
        if use_redis:
            redis_url = get_config_value('REDIS_URL', '')
            if not redis_url:
                errors.append("USE_REDIS=true, –Ω–æ REDIS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            elif not redis_url.startswith(('redis://', 'rediss://')):
                warnings.append(f"REDIS_URL –∏–º–µ–µ—Ç –Ω–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {redis_url}")
            else:
                success_items.append("REDIS_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            success_items.append("Redis –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏")
    except Exception as e:
        warnings.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Redis: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –ª–æ–≥
    if warnings:
        for warning in warnings:
            logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {warning}")
    
    # –í—ã–≤–æ–¥–∏–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if success_items:
        for item in success_items:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {item}")
    
    return len(errors) == 0, errors

# –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
async def send_admin_notification(message, level="INFO"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.
    
    Args:
        message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        level (str): –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (INFO, WARNING, ERROR)
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö ID –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = get_admin_ids()
    
    if not admin_ids:
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return
        
    # –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    icon = "‚ÑπÔ∏è" if level == "INFO" else "‚ö†Ô∏è" if level == "WARNING" else "üî¥"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = f"{icon} <b>{level}</b>\n\n{message}"
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    max_length = 4000
    if len(formatted_message) > max_length:
        formatted_message = formatted_message[:max_length - 100] + "...\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞]"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if hasattr(send_admin_notification, 'bot') and send_admin_notification.bot:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        sent_count = 0
        for admin_id in admin_ids:
            try:
                await send_admin_notification.bot.send_message(
                    admin_id, 
                    formatted_message,
                    parse_mode="HTML"
                )
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {level} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
    else:
        logger.warning("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

async def handle_global_exception(exception, update):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞–¥–µ–Ω–∏—è –±–æ—Ç–∞.
    
    Args:
        exception: –í–æ–∑–Ω–∏–∫—à–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—ã–∑–≤–∞–≤—à–∏–π –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    """
    error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exception}"
    logger.error(error_msg, exc_info=True)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admin_msg = f"üî¥ <b>–û–®–ò–ë–ö–ê –í –ë–û–¢–ï</b>\n\n"
    admin_msg += f"<b>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:</b> {exception.__class__.__name__}\n"
    admin_msg += f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {str(exception)}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± update
    if update:
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ message –≤ update
            if hasattr(update, 'message') and update.message:
                if hasattr(update.message, 'from_user') and update.message.from_user:
                    user_info = update.message.from_user
                    admin_msg += f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_info.id} ({getattr(user_info, 'username', '–Ω–µ—Ç –∏–º–µ–Ω–∏')})\n"
                    
                if hasattr(update.message, 'text'):
                    admin_msg += f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {update.message.text}\n"
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback_query –≤ update
            elif hasattr(update, 'callback_query') and update.callback_query:
                if hasattr(update.callback_query, 'from_user') and update.callback_query.from_user:
                    user_info = update.callback_query.from_user
                    admin_msg += f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_info.id} ({getattr(user_info, 'username', '–Ω–µ—Ç –∏–º–µ–Ω–∏')})\n"
                    
                if hasattr(update.callback_query, 'data'):
                    admin_msg += f"<b>Callback:</b> {update.callback_query.data}\n"
                    
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å JSON-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            if not user_info and hasattr(update, 'to_json'):
                try:
                    admin_msg += f"<b>Update:</b> {update.to_json()}\n"
                except:
                    admin_msg += f"<b>Update:</b> [–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å]\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            elif not user_info and hasattr(update, '__str__'):
                try:
                    admin_msg += f"<b>Update:</b> {str(update)}\n"
                except:
                    admin_msg += f"<b>Update:</b> [–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ]\n"
                
        except Exception as e:
            admin_msg += f"<i>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e.__class__.__name__}: {str(e)}</i>\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    try:
        await send_admin_notification(admin_msg, "ERROR")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if update and hasattr(update, 'message') and update.message:
            if hasattr(update.message, 'reply'):
                await update.message.reply(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
                )
                
        # –ï—Å–ª–∏ —ç—Ç–æ callback-–∑–∞–ø—Ä–æ—Å
        elif update and hasattr(update, 'callback_query') and update.callback_query:
            if hasattr(update.callback_query, 'answer'):
                await update.callback_query.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    except Exception as reply_e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –æ—à–∏–±–∫–µ: {reply_e}")

# –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM
async def reset_user_states(user_id, state):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    try:
        logger.info(f"–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await state.finish()
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

@track_command
async def cmd_admin(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(message.from_user.id):
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    user_id = message.from_user.id if hasattr(message, 'from_user') and hasattr(message.from_user, 'id') else "unknown"
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
    stats = bot_metrics.get_summary()
    uptime = bot_metrics.get_uptime()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
    admin_panel = (
        f"üõ†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats['unique_users'])}\n"
        f"üìù –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {stats['total_commands']}\n"
        f"üîÑ –í—Å–µ–≥–æ –∫–æ–ª–±—ç–∫–æ–≤: {stats['total_callbacks']}\n"
        f"‚ö†Ô∏è –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
    )
    
    await message.answer(admin_panel, parse_mode="HTML")

def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤.
    –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    –≤ register_command_handlers –∏ register_callback_handlers.
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
    """
    try:
        # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
        dp.register_message_handler(cmd_start_universal, commands=["start"], state="*")
        logger.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç
        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —á–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dp.register_message_handler(on_new_message_or_chat_member, content_types=types.ContentTypes.ANY)
        logger.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        dp.register_message_handler(cmd_stats, commands=["stats"])
        logger.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        dp.register_message_handler(cmd_restart, commands=["restart"])
        logger.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
        dp.register_message_handler(cmd_admin, commands=["admin"])
        logger.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ML-–º–µ–Ω—é
        dp.register_message_handler(cmd_ml_menu, commands=["ml"])
        logger.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ml")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤
        try:
            dp.callback_query_handlers.unregister(process_callback)  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        except Exception:
            pass
            
        try:
            dp.register_callback_query_handler(process_callback)
            logger.debug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤")
        except Exception as callback_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤: {callback_error}")
        
        logger.info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}", exc_info=True)
        raise  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã—à–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–æ–ª–±—ç–∫–æ–≤
@track_callback
async def process_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–ª–±—ç–∫–∏ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å callback_query
        if not callback_query or not hasattr(callback_query, 'data') or not callback_query.data:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_query –±–µ–∑ data")
            if hasattr(callback_query, 'answer'):
                await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                await callback_query.message.edit_text(
                    "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                    reply_markup=get_main_keyboard(),
                    parse_mode="HTML"
                )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º callback_data
        callback_data = callback_query.data
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await callback_query.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–ª–±—ç–∫–∞ (—á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ :)
        parts = callback_data.split(":", 1)
        category = parts[0] if len(parts) > 0 else "unknown"
        action = parts[1] if len(parts) > 1 else "default"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category == "menu":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
            await handle_menu_callback(callback_query, action)
        elif category == "arbitrage":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            await handle_arbitrage_callback(callback_query, action)
        elif category == "item":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
            await handle_item_callback(callback_query, action)
        elif category == "settings":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await handle_settings_callback(callback_query, action)
        elif category == "ml":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ML-—Ñ—É–Ω–∫—Ü–∏–π
            await handle_ml_callback(callback_query, action)
        elif category == "back":
            # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
            await handle_back_callback(callback_query)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–ª–±—ç–∫–∞: {category} –≤ –∑–∞–ø—Ä–æ—Å–µ {callback_data}")
            try:
                await callback_query.answer(f"–§—É–Ω–∫—Ü–∏—è '{category}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await callback_query.message.edit_text(
                    "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                    "–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª:",
                    reply_markup=get_main_keyboard(),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞: {e}", exc_info=True)
        try:
            if hasattr(callback_query, 'answer'):
                await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
                
            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if hasattr(callback_query, 'message') and hasattr(callback_query.message, 'edit_text'):
                await callback_query.message.edit_text(
                    "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                    reply_markup=get_main_keyboard(),
                    parse_mode="HTML"
                )
        except Exception as answer_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∫–æ–ª–±—ç–∫–∞: {answer_error}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
async def handle_menu_callback(callback_query: types.CallbackQuery, action="default"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é"""
    try:
        chat_id = callback_query.message.chat.id
        message_id = callback_query.message.message_id
        
        if action == "default" or action == "main":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback_query.message.edit_text(
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DMarket Trading Bot!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        elif action == "arbitrage":
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            await callback_query.message.edit_text(
                "üìä <b>–ê—Ä–±–∏—Ç—Ä–∞–∂</b>\n\n"
                "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ "
                "–Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:",
                reply_markup=get_game_selection_keyboard(),
                parse_mode="HTML"
            )
        elif action == "items":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            await callback_query.message.edit_text(
                "üéÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏</b>\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã "
                "–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=get_item_actions_keyboard(),
                parse_mode="HTML"
            )
        elif action == "settings":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await callback_query.message.edit_text(
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
                reply_markup=get_settings_keyboard(),
                parse_mode="HTML"
            )
        elif action == "investments":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö
            await callback_query.message.edit_text(
                "üìà <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>\n\n"
                "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å "
                "–Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
                "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback_query.answer(f"–†–∞–∑–¥–µ–ª '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback_query.message.edit_text(
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                "–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é: {e}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ–Ω—é")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback_query.message.edit_text(
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        except Exception:
            pass

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–¥—É–ª–µ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
class ArbitrageManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥—É–ª—è–º–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    """
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.bellman_ford = None
        self.linear_programming = None
        self.arbitrage_finder = None
        self.arbitrage_modes_manager = None
        self.initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        if self.initialized:
            return
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —Å —Ä–µ–∂–∏–º–∞–º–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            from src.arbitrage.arbitrage_modes import ArbitrageManager as ModesManager
            self.arbitrage_modes_manager = ModesManager()
            logger.info("–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        except ImportError:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å arbitrage_modes")
            
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        
        self.initialized = True
        
    async def find_all_arbitrage_opportunities(self, *args, **kwargs):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã"""
        if not self.initialized:
            await self.initialize()
            
        opportunities = []
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –º–æ–¥—É–ª—å —Ä–µ–∂–∏–º–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self.arbitrage_modes_manager:
            try:
                mode_opportunities = await self.arbitrage_modes_manager.find_opportunities(*args, **kwargs)
                opportunities.extend(mode_opportunities)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(mode_opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ —Ä–µ–∂–∏–º—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º–æ–≤: {e}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–µ–ª–ª–º–∞–Ω-–§–æ—Ä–¥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        if self.bellman_ford and (not opportunities or kwargs.get('use_all_methods', False)):
            try:
                bf_opportunities = await self.bellman_ford.find_opportunities(*args, **kwargs)
                opportunities.extend(bf_opportunities)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(bf_opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Bellman-Ford")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Bellman-Ford: {e}")
        
        if not opportunities:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤")
        
        return opportunities

    async def execute_arbitrage_strategy(self, opportunities, mode=None, execute=False):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
        
        Args:
            opportunities: –°–ø–∏—Å–æ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            mode: –†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            execute: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        if not self.initialized:
            await self.initialize()
            
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self.arbitrage_modes_manager:
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ArbitrageMode –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ enum
                from src.arbitrage.arbitrage_modes import ArbitrageMode
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Ä–µ–∂–∏–º –≤ enum –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                arb_mode = None
                if isinstance(mode, str):
                    if mode == "balance_boost":
                        arb_mode = ArbitrageMode.BALANCE_BOOST
                    elif mode == "medium_trader":
                        arb_mode = ArbitrageMode.MEDIUM_TRADER
                    elif mode == "trade_pro":
                        arb_mode = ArbitrageMode.TRADE_PRO
                else:
                    arb_mode = mode
                
                # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –≤–∏–¥–µ DataFrame, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
                if isinstance(opportunities, list):
                    import pandas as pd
                    opportunities_df = pd.DataFrame(opportunities)
                else:
                    opportunities_df = opportunities
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –Ω–æ–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                if arb_mode and not opportunities_df.empty:
                    result = await self.arbitrage_modes_manager.execute_arbitrage_strategy(
                        opportunities_df, arb_mode, execute
                    )
                    logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —á–µ—Ä–µ–∑ arbitrage_modes, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['success']}")
                    return result
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å: {e}", exc_info=True)
        
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã
        # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
        
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        return {"success": False, "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"}

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
arbitrage_manager = ArbitrageManager()
# –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ initialize() –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "no running event loop"
# arbitrage_manager.initialize()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
async def find_all_arbitrage_opportunities_async(*args, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
    """
    if not arbitrage_manager.initialized:
        await arbitrage_manager.initialize()
    return await arbitrage_manager.find_all_arbitrage_opportunities(*args, **kwargs)

logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

@track_command
async def on_new_message_or_chat_member(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    is_new_chat = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if message.new_chat_members and any(member.id == bot.id for member in message.new_chat_members):
        is_new_chat = True
        logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {message.chat.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if message.chat.type == 'private':
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –µ—Å–ª–∏ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
        if not message.text or not message.text.startswith('/'):
            is_new_chat = True
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —á–∞—Ç –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if is_new_chat:
        user_name = message.from_user.first_name if hasattr(message, 'from_user') and hasattr(message.from_user, 'first_name') else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        welcome_message = (
            f"üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!</b>\n\n"
            f"–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DMarket Trading.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_menu_kb()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            welcome_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è ML-–º–æ–¥–µ–ª–µ–π
@track_command
async def cmd_ml_menu(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–ø—Ü–∏–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("üß† –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω", callback_data="ml:price_prediction"),
            types.InlineKeyboardButton("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="ml:investment"),
            types.InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤", callback_data="ml:time_series"),
            types.InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤", callback_data="ml:compare_algorithms"),
            types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")
        )
        
        await message.answer(
            "ü§ñ <b>–ú–µ–Ω—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é ML-–º–æ–¥–µ–ª–µ–π:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ML-–º–µ–Ω—é: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@track_callback
async def handle_ml_callback(callback_query: types.CallbackQuery, action="default"):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è ML-—Ñ—É–Ω–∫—Ü–∏–π.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞
        action: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏—è
    """
    try:
        if action == "price_prediction":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                types.InlineKeyboardButton("üìä Prophet", callback_data="ml:algorithm:prophet"),
                types.InlineKeyboardButton("üå≤ XGBoost", callback_data="ml:algorithm:xgboost"),
                types.InlineKeyboardButton("üìà ARIMA", callback_data="ml:algorithm:arima"),
                types.InlineKeyboardButton("üîÑ –ê–Ω—Å–∞–º–±–ª—å (–≤—Å–µ –º–µ—Ç–æ–¥—ã)", callback_data="ml:algorithm:ensemble"),
                types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ml:default")
            )
            
            await callback_query.message.edit_text(
                "üß† <b>–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        elif action == "investment":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            await callback_query.message.edit_text(
                "üìà <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>\n\n"
                "–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...",
                parse_mode="HTML"
            )
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ ML-–º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä: opportunities = await ml_predictor.find_investment_opportunities()
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            opportunities = [
                {"item_name": "AWP | –ê–∑–∏–º–æ–≤", "predicted_roi": 15.2, "confidence": 0.85},
                {"item_name": "AK-47 | –í—É–ª–∫–∞–Ω", "predicted_roi": 12.7, "confidence": 0.82},
                {"item_name": "M4A4 | –ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "predicted_roi": 9.5, "confidence": 0.78}
            ]
            
            if opportunities:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results_text = "\n".join([
                    f"üîπ <b>{item['item_name']}</b>: ROI {item['predicted_roi']:.1f}% "
                    f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {item['confidence']*100:.0f}%)"
                    for item in opportunities[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
                ])
                
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ml:default")
                )
                
                await callback_query.message.edit_text(
                    f"üìà <b>–¢–æ–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\n\n"
                    f"{results_text}\n\n"
                    f"<i>–î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö ML-–º–æ–¥–µ–ª–µ–π.</i>",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ml:default")
                )
                
                await callback_query.message.edit_text(
                    "üìà <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        
        elif action == "time_series":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("–î–µ–Ω—å", callback_data="ml:time_series:day"),
                types.InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="ml:time_series:week"),
                types.InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="ml:time_series:month"),
                types.InlineKeyboardButton("–ì–æ–¥", callback_data="ml:time_series:year"),
                types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ml:default")
            )
            
            await callback_query.message.edit_text(
                "üîç <b>–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        elif action == "compare_algorithms":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            await callback_query.message.edit_text(
                "üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</b>\n\n"
                "–ò–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...",
                parse_mode="HTML"
            )
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparison_data = [
                {"algorithm": "Prophet", "accuracy": 87.5, "processing_time": 0.8},
                {"algorithm": "XGBoost", "accuracy": 89.2, "processing_time": 1.2},
                {"algorithm": "ARIMA", "accuracy": 85.1, "processing_time": 0.6},
                {"algorithm": "Ensemble", "accuracy": 91.4, "processing_time": 2.5}
            ]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results_text = "\n".join([
                f"üîπ <b>{data['algorithm']}</b>: —Ç–æ—á–Ω–æ—Å—Ç—å {data['accuracy']:.1f}%, "
                f"–≤—Ä–µ–º—è {data['processing_time']:.1f} —Å–µ–∫."
                for data in comparison_data
            ])
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ml:default")
            )
            
            await callback_query.message.edit_text(
                f"üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ ML</b>\n\n"
                f"{results_text}\n\n"
                f"<i>–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∏–ª—É—á—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å, "
                f"–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.</i>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        elif action.startswith("algorithm:"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            algorithm = action.split(":")[-1]
            
            await callback_query.message.edit_text(
                f"üßÆ <b>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {algorithm.upper()}</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω—ã.",
                parse_mode="HTML"
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
            # (–¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è FSM, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ)
        
        elif action.startswith("time_series:"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            period = action.split(":")[-1]
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            # —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
            
            # –ó–∞–≥–ª—É—à–∫–∞
            await callback_query.message.edit_text(
                f"üîç <b>–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∑–∞ {period}</b>\n\n"
                f"–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="ml:time_series")
                ),
                parse_mode="HTML"
            )
        
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ ML-–º–µ–Ω—é
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                types.InlineKeyboardButton("üß† –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω", callback_data="ml:price_prediction"),
                types.InlineKeyboardButton("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="ml:investment"),
                types.InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤", callback_data="ml:time_series"),
                types.InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤", callback_data="ml:compare_algorithms"),
                types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")
            )
            
            await callback_query.message.edit_text(
                "ü§ñ <b>–ú–µ–Ω—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é ML-–º–æ–¥–µ–ª–µ–π:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ML-–∫–æ–ª–±—ç–∫–∞: {e}", exc_info=True)
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback_query.message.edit_text(
                "ü§ñ <b>–ú–µ–Ω—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")
                ),
                parse_mode="HTML"
            )
        except Exception:
            pass
