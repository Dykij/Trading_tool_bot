"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram –±–æ—Ç–∞.
"""

import logging
from typing import Optional, Union, Dict, Any, List
from datetime import datetime

from aiogram import Dispatcher, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–±—ç–∫–æ–≤
from src.telegram.decorators import track_callback

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from src.telegram.keyboards import (
    get_main_keyboard,
    get_menu_kb,
    get_cancel_kb,
    get_confirmation_kb,
    get_game_selection_keyboard,
    get_item_actions_keyboard,
    get_settings_keyboard,
    get_budget_input_keyboard,
    get_arbitrage_mode_keyboard
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from src.telegram.custom_keyboards import (
    get_games_selection_keyboard,
    get_arbitrage_execution_keyboard,
    get_arbitrage_results_keyboard,
    get_arbitrage_settings_keyboard
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
from src.arbitrage.arbitrage_modes import ArbitrageMode, ArbitrageManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞—Å–∞–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
from src.trading.trading_facade import get_trading_service

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    waiting_for_item_name = State()
    waiting_for_price = State()
    waiting_for_confirmation = State()
    
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    waiting_for_arbitrage_budget = State()
    waiting_for_arbitrage_mode = State()
    waiting_for_arbitrage_results = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è CS2
    waiting_for_cs2_category = State()
    waiting_for_cs2_price_range = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
@track_callback
async def process_callback_query(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback_data
    callback_data = callback_query.data
    user_id = callback_query.from_user.id
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–µ–π—Å—Ç–≤–∏–µ:–ø–∞—Ä–∞–º–µ—Ç—Ä" –∏–ª–∏ "–¥–µ–π—Å—Ç–≤–∏–µ:–ø–∞—Ä–∞–º–µ—Ç—Ä1:–ø–∞—Ä–∞–º–µ—Ç—Ä2"
        parts = callback_data.split(":", 2)
        action = parts[0]
        param = parts[1] if len(parts) > 1 else ""
        param2 = parts[2] if len(parts) > 2 else ""
        
        # –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = {
            "menu": handle_menu_callback,
            "cancel_action": handle_cancel_callback,
            "confirm": handle_confirmation_callback,
            "back_to_main": handle_back_to_main_callback,
            "game": handle_game_selection_callback,
            "item": handle_item_callback,
            "settings": handle_settings_callback,
            "arbitrage_mode": handle_arbitrage_mode_callback,
            "budget": handle_budget_callback,
            "toggle_game": handle_game_toggle_callback,
            "select_all_games": handle_select_all_games_callback,
            "save_game_selection": handle_save_game_selection_callback,
            "arbitrage_exec": handle_arbitrage_execution_callback,
            "arbitrage_page": handle_arbitrage_page_callback,
            "arbitrage_results": handle_arbitrage_results_callback,
            "back_to_arbitrage": None,  # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            "back_to_arbitrage_settings": None,  # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            "back_to_arbitrage_mode": None,  # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            "back_to_arbitrage_execution": None  # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if action in handlers and handlers[action] is not None:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            logger.debug(f"–í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ {action} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {param}, {param2}")
            try:
                await handlers[action](callback_query, state, param, param2 if action == "item" else None)
            except TypeError:
                # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç param2, –≤—ã–∑—ã–≤–∞–µ–º —Å –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                await handlers[action](callback_query, state, param)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö "back_to" –¥–µ–π—Å—Ç–≤–∏–π
        elif action == "back_to_arbitrage":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            try:
                await callback_query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
                    reply_markup=get_arbitrage_mode_keyboard()
                )
                await callback_query.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ back_to_arbitrage: {e}")
                await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        elif action == "back_to_arbitrage_settings":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            try:
                await callback_query.message.edit_text(
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
                    reply_markup=get_arbitrage_settings_keyboard()
                )
                await callback_query.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ back_to_arbitrage_settings: {e}")
                await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        elif action == "back_to_arbitrage_mode":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            try:
                await callback_query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
                    reply_markup=get_arbitrage_mode_keyboard()
                )
                await callback_query.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ back_to_arbitrage_mode: {e}")
                await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        elif action == "back_to_arbitrage_execution":
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                async with state.proxy() as data:
                    arbitrage_mode = data.get('arbitrage_mode', 'balance_boost')
                    budget = data.get('arbitrage_budget', 100)
                    selected_games = data.get('selected_games', ["cs2", "dota2", "tf2", "rust"])
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                game_names = {
                    "cs2": "CS2",
                    "dota2": "Dota 2",
                    "tf2": "Team Fortress 2",
                    "rust": "Rust"
                }
                
                games_text = ", ".join(game_names.get(game, game) for game in selected_games)
                
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                await callback_query.message.edit_text(
                    f"<b>üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n"
                    f"<b>–†–µ–∂–∏–º:</b> {get_mode_name(arbitrage_mode)}\n"
                    f"<b>–ë—é–¥–∂–µ—Ç:</b> ${budget}\n"
                    f"<b>–ò–≥—Ä—ã:</b> {games_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="HTML",
                    reply_markup=get_arbitrage_execution_keyboard()
                )
                await callback_query.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ back_to_arbitrage_execution: {e}")
                await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∑–∞–ø—É—Å–∫–∞")
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ callback: {action}, –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
            await callback_query.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {action}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}", exc_info=True)
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        except Exception as answer_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ –æ—à–∏–±–∫–µ: {answer_error}")
            
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Å–ª—É—á–∞–µ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–∏
        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.finish()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            await callback_query.message.reply(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_menu_kb()
            )
        except Exception as menu_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {menu_error}")

# –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–±—ç–∫–æ–≤
async def handle_menu_callback(callback_query: CallbackQuery, state: FSMContext, action: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –æ—Ç –º–µ–Ω—é.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action: –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏—è
    """
    if action == "add_items":
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
            reply_markup=get_cancel_kb()
        )
        await state.set_state("waiting_for_item_name")
    elif action == "my_items":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        await callback_query.message.answer("–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    elif action == "statistics":
        await callback_query.message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏:\n\n–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    await callback_query.answer()

async def handle_cancel_callback(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await state.finish()
    await callback_query.message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_menu_kb()
    )
    await callback_query.answer()

async def handle_confirmation_callback(callback_query: CallbackQuery, state: FSMContext, answer: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer: –û—Ç–≤–µ—Ç (yes/no)
    """
    if answer == "yes":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    else:
        await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    await state.finish()
    await callback_query.answer()

async def handle_back_to_main_callback(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await state.finish()
    await callback_query.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_menu_kb()
    )
    await callback_query.answer()

async def handle_game_selection_callback(callback_query: CallbackQuery, state: FSMContext, game: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        game: –í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞
    """
    async with state.proxy() as data:
        data["selected_game"] = game
    
    await callback_query.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞: {game}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state("waiting_for_item_name")
    await callback_query.answer()

async def handle_item_callback(callback_query: CallbackQuery, state: FSMContext, action: str, item_id: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action: –î–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º
        item_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    if action == "buy":
        await callback_query.message.answer(f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å ID: {item_id}")
    elif action == "sell":
        await callback_query.message.answer(f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å ID: {item_id}")
    elif action == "analyze":
        await callback_query.message.answer(f"–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–∞ —Å ID: {item_id}")
    elif action == "history":
        await callback_query.message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ —Å ID: {item_id}")
    elif action == "favorite":
        await callback_query.message.answer(f"–ü—Ä–µ–¥–º–µ—Ç —Å ID: {item_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    elif action == "delete":
        await callback_query.message.answer(
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å ID: {item_id}?",
            reply_markup=get_confirmation_kb("delete")
        )
        async with state.proxy() as data:
            data["item_to_delete"] = item_id
        await state.set_state("waiting_for_confirmation")
    
    await callback_query.answer()

async def handle_settings_callback(callback_query: CallbackQuery, state: FSMContext, setting: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setting: –ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    if setting == "notifications":
        await callback_query.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    elif setting == "frequency":
        await callback_query.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ —Ä–µ–∂–∏–º–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
async def handle_arbitrage_mode_callback(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∫–æ–ª–±–µ–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_data = await state.get_data()
    mode = callback_query.data.split(':')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(arbitrage_mode=mode)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å ArbitrageMode –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
        from src.arbitrage.arbitrage_modes import ArbitrageMode, ArbitrageParams
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Ä–µ–∂–∏–º –≤ enum
        arb_mode = None
        if mode == "balance_boost":
            arb_mode = ArbitrageMode.BALANCE_BOOST
        elif mode == "medium_trader":
            arb_mode = ArbitrageMode.MEDIUM_TRADER
        elif mode == "trade_pro":
            arb_mode = ArbitrageMode.TRADE_PRO
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞
        if arb_mode:
            params = ArbitrageParams(mode=arb_mode)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–∫ fallback
            from src.arbitrage.dmarket_arbitrage_finder import ArbitrageFinderParams
            params = ArbitrageFinderParams(mode=mode)
            
    except ImportError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        from src.arbitrage.dmarket_arbitrage_finder import ArbitrageFinderParams
        params = ArbitrageFinderParams(mode=mode)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if mode == "info":
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–∞—Ö —Å —É—á–µ—Ç–æ–º ML-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Trade Pro
        text = (
            "<b>üìä –†–µ–∂–∏–º—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n"
            "<b>üöÄ –†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞ ($1-5)</b>\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª—å—é\n"
            "‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –ª–∏–∫–≤–∏–¥–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
            "‚Ä¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫\n\n"
            "<b>üíº –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä ($5-20)</b>\n"
            "‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
            "‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç—ã —Å—Ä–µ–¥–Ω–µ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n"
            "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫\n\n"
            "<b>üëë Trade Pro ($20-100)</b>\n"
            "‚Ä¢ –í—ã—Å–æ–∫–∞—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å\n"
            "‚Ä¢ ML-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∏—Å–∫–æ–≤\n"
        )
        keyboard = create_arbitrage_mode_keyboard()
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±—é–¥–∂–µ—Ç
        if mode == "balance_boost":
            text = (
                "<b>üöÄ –†–µ–∂–∏–º \"–†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞\"</b>\n\n"
                f"–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–±—ã–ª–∏: ${params.min_profit}-{params.max_profit}\n"
                f"–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${params.min_price}-{params.max_price}\n\n"
                "–≠—Ç–æ—Ç —Ä–µ–∂–∏–º —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –±—ã—Å—Ç—Ä—ã—Ö —Å–¥–µ–ª–∫–∞—Ö —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª—å—é. "
                "–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –∏ —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±—ã—Å—Ç—Ä–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å "
                "—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º.\n\n"
                "<b>–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –±—é–¥–∂–µ—Ç:</b>"
            )
        elif mode == "medium_trader":
            text = (
                "<b>üíº –†–µ–∂–∏–º \"–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä\"</b>\n\n"
                f"–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–±—ã–ª–∏: ${params.min_profit}-{params.max_profit}\n"
                f"–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${params.min_price}-{params.max_price}\n\n"
                "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. "
                "–§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Å—Ä–µ–¥–Ω–µ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å —Ö–æ—Ä–æ—à–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é "
                "–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º.\n\n"
                "<b>–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –±—é–¥–∂–µ—Ç:</b>"
            )
        elif mode == "trade_pro":
            text = (
                "<b>üëë –†–µ–∂–∏–º \"Trade Pro\"</b>\n\n"
                f"–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–±—ã–ª–∏: ${params.min_profit}-{params.max_profit}\n"
                f"–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${params.min_price}-{params.max_price}\n\n"
                "–ü—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Å ML-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π. "
                "–ù–∞—Ü–µ–ª–µ–Ω –Ω–∞ —Ä–µ–¥–∫–∏–µ –∏ –¥–æ—Ä–æ–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é, "
                "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏. "
                "–¢—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞.\n\n"
                "<b>–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –±—é–¥–∂–µ—Ç:</b>"
            )
        else:
            text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>"
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞
        keyboard = create_budget_keyboard()
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –±—é–¥–∂–µ—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
async def handle_budget_callback(callback_query: CallbackQuery, state: FSMContext, budget_value: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        budget_value: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
    """
    user_id = callback_query.from_user.id
    
    if budget_value == "custom":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ (–≤ USD):",
            reply_markup=get_cancel_kb()
        )
        await state.set_state(UserState.waiting_for_arbitrage_budget)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç
        try:
            budget = float(budget_value)
            async with state.proxy() as data:
                data['arbitrage_budget'] = budget
                arbitrage_mode = data.get('arbitrage_mode', 'balance_boost')
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä
            await callback_query.message.edit_text(
                f"<b>üí∞ –ë—é–¥–∂–µ—Ç: ${budget}</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
                parse_mode="HTML",
                reply_markup=get_game_selection_keyboard()
            )
        except ValueError:
            # –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_budget_input_keyboard()
            )
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞
async def process_arbitrage_budget(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    budget_text = message.text.strip().replace('$', '').replace(',', '.')
    
    try:
        budget = float(budget_text)
        if budget <= 0:
            raise ValueError("–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—é–¥–∂–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['arbitrage_budget'] = budget
            arbitrage_mode = data.get('arbitrage_mode', 'balance_boost')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
        await message.answer(
            f"<b>üí∞ –ë—é–¥–∂–µ—Ç: ${budget}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            parse_mode="HTML",
            reply_markup=get_game_selection_keyboard()
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.reset_state(with_data=False)
        
    except ValueError as e:
        # –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ (–≤ USD):",
            reply_markup=get_cancel_kb()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
async def handle_game_toggle_callback(callback_query: CallbackQuery, state: FSMContext, game: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        game: –ö–æ–¥ –∏–≥—Ä—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    async with state.proxy() as data:
        selected_games = data.get('selected_games', ["cs2", "dota2", "tf2", "rust"])
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        if game in selected_games:
            selected_games.remove(game)
        else:
            selected_games.append(game)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        data['selected_games'] = selected_games
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback_query.message.edit_reply_markup(
        reply_markup=get_game_selection_keyboard(selected_games)
    )
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∏–≥—Ä—ã"
async def handle_select_all_games_callback(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∏–≥—Ä.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã
    async with state.proxy() as data:
        data['selected_games'] = ["cs2", "dota2", "tf2", "rust"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback_query.message.edit_reply_markup(
        reply_markup=get_game_selection_keyboard(["cs2", "dota2", "tf2", "rust"])
    )
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
async def handle_save_game_selection_callback(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as data:
        selected_games = data.get('selected_games', ["cs2", "dota2", "tf2", "rust"])
        budget = data.get('arbitrage_budget', 100)
        arbitrage_mode = data.get('arbitrage_mode', 'balance_boost')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    game_names = {
        "cs2": "CS2",
        "dota2": "Dota 2",
        "tf2": "Team Fortress 2",
        "rust": "Rust"
    }
    
    games_text = ", ".join(game_names[game] for game in selected_games)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    await callback_query.message.edit_text(
        f"<b>üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n"
        f"<b>–†–µ–∂–∏–º:</b> {get_mode_name(arbitrage_mode)}\n"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> ${budget}\n"
        f"<b>–ò–≥—Ä—ã:</b> {games_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_arbitrage_execution_keyboard()
    )
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
@track_callback
async def handle_arbitrage_execution_callback(callback_query: CallbackQuery, state: FSMContext, param: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        param: –ü–∞—Ä–∞–º–µ—Ç—Ä (–¥–µ–π—Å—Ç–≤–∏–µ)
    """
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {param}")
    
    if param == "start":
        # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        await start_arbitrage_search(callback_query, state)
    elif param == "start_cs2":
        # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è CS2
        await start_cs2_arbitrage_search(callback_query, state)
    elif param == "edit_games":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä
        async with state.proxy() as data:
            await callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:",
                reply_markup=await get_games_selection_keyboard(data)
            )
            await callback_query.answer()
    elif param == "edit_mode":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=get_arbitrage_mode_keyboard()
        )
        await callback_query.answer()
    elif param == "edit_budget":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –±—é–¥–∂–µ—Ç–∞
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=get_budget_input_keyboard()
        )
        await callback_query.answer()
    elif param == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        await callback_query.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:",
            reply_markup=get_arbitrage_settings_keyboard()
        )
        await callback_query.answer()
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
async def handle_arbitrage_page_callback(callback_query: CallbackQuery, state: FSMContext, page: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (current)
    """
    if page == "current":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await callback_query.answer()
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —á–∏—Å–ª–æ
    try:
        page_num = int(page)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['arbitrage_page'] = page_num
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await display_arbitrage_results(callback_query.message, state)
        
    except ValueError:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
async def handle_arbitrage_results_callback(callback_query: CallbackQuery, state: FSMContext, action: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action: –î–µ–π—Å—Ç–≤–∏–µ (execute, save, refresh)
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as data:
        results = data.get('arbitrage_results', [])
        arbitrage_mode = data.get('arbitrage_mode', 'balance_boost')
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    arbitrage_manager = ArbitrageManager()
    
    if action == "execute":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not results:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.",
                reply_markup=get_arbitrage_execution_keyboard()
            )
            await callback_query.answer()
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            f"<b>üí∞ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫</b>\n\n"
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å <b>{len(results)}</b> —Å–¥–µ–ª–æ–∫ –≤ —Ä–µ–∂–∏–º–µ "
            f"{get_mode_name(arbitrage_mode)}.\n\n"
            f"–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Å–¥–µ–ª–∫–∞–º –Ω–∞ DMarket.\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?",
            parse_mode="HTML",
            reply_markup=get_confirmation_kb("execute_arbitrage")
        )
    
    elif action == "refresh":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await callback_query.message.edit_text(
            f"<b>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</b>\n\n"
            f"–ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ {get_mode_name(arbitrage_mode)}...\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        async with state.proxy() as data:
            budget = data.get('arbitrage_budget', 100)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å–Ω–æ–≤–∞
            opportunities = await arbitrage_manager.find_arbitrage_opportunities(
                mode=arbitrage_mode,
                budget=budget
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            async with state.proxy() as data:
                data['arbitrage_results'] = opportunities.to_dict('records')
                data['arbitrage_found_count'] = len(opportunities)
                data['arbitrage_page'] = 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await display_arbitrage_results(callback_query.message, state)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {str(e)}")
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {str(e)}",
                reply_markup=get_arbitrage_results_keyboard(1, 1)
            )
    
    await callback_query.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
async def display_arbitrage_results(message: types.Message, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as data:
        results = data.get('arbitrage_results', [])
        current_page = data.get('arbitrage_page', 1)
        arbitrage_mode = data.get('arbitrage_mode', 'balance_boost')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not results:
        await message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
            reply_markup=get_arbitrage_execution_keyboard()
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (10 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    items_per_page = 10
    total_pages = (len(results) + items_per_page - 1) // items_per_page
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = max(1, min(current_page, total_pages))
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (current_page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(results))
    page_items = results[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    mode_name = get_mode_name(arbitrage_mode)
    total_profit = sum(item.get('profit', 0) for item in results)
    
    message_text = f"<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ({mode_name})</b>\n\n"
    message_text += f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: <b>{len(results)}</b>\n"
    message_text += f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${total_profit:.2f}</b>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    for i, item in enumerate(page_items, start=start_idx + 1):
        name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
        game = item.get('game', '').upper()
        price = item.get('price', 0)
        sell_price = item.get('recommended_price', 0)
        profit = item.get('profit', 0)
        profit_percent = item.get('profit_percent', 0)
        
        message_text += f"{i}. <b>{name}</b> [{game}]\n"
        message_text += f"   üí∞ ${price:.2f} ‚û°Ô∏è ${sell_price:.2f} (‚≠ê +${profit:.2f}, {profit_percent:.1f}%)\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    message_text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await message.edit_text(
        message_text,
        parse_mode="HTML",
        reply_markup=get_arbitrage_results_keyboard(current_page, total_pages)
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞
def get_mode_name(mode_code: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –ø–æ –∫–æ–¥—É.
    
    Args:
        mode_code: –ö–æ–¥ —Ä–µ–∂–∏–º–∞
        
    Returns:
        –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    """
    mode_names = {
        "balance_boost": "üöÄ –†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞",
        "medium_trader": "üíº –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä",
        "trade_pro": "üëë Trade Pro"
    }
    
    return mode_names.get(mode_code, mode_code)

# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
def register_callback_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–æ–ª–±—ç–∫–æ–≤
    dp.register_callback_query_handler(process_callback_query, state="*")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞
    dp.register_message_handler(process_arbitrage_budget, state=UserState.waiting_for_arbitrage_budget)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    return dp 

def get_mode_display_name(mode: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        mode: –ö–æ–¥ —Ä–µ–∂–∏–º–∞
        
    Returns:
        –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–µ–∂–∏–º–∞
    """
    mode_names = {
        "balance_boost": "üöÄ –†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞",
        "medium_trader": "üíº –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä",
        "trade_pro": "üëë Trade Pro"
    }
    return mode_names.get(mode, mode)

def format_arbitrage_results(results, mode: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
    
    Args:
        results: –°–ø–∏—Å–æ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        mode: –†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    header = f"üéØ <b>–ù–∞–π–¥–µ–Ω–æ {len(results)} –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\n\n"
    
    if not results:
        return header + "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
    
    details = []
    for idx, opportunity in enumerate(results[:10], 1):
        profit_pct = opportunity.profit_percentage
        profit_usd = opportunity.profit_usd
        
        item_name = opportunity.item_name
        buy_price = opportunity.buy_price
        sell_price = opportunity.sell_price
        marketplace = opportunity.marketplace
        
        detail = (f"{idx}. <b>{item_name}</b>\n"
                 f"üí∞ –ü—Ä–∏–±—ã–ª—å: ${profit_usd:.2f} ({profit_pct:.2f}%)\n"
                 f"üìà –ü–æ–∫—É–ø–∫–∞: ${buy_price:.2f} ‚Üí –ü—Ä–æ–¥–∞–∂–∞: ${sell_price:.2f}\n"
                 f"üè™ –ü–ª–æ—â–∞–¥–∫–∞: {marketplace}\n")
        details.append(detail)
    
    if len(results) > 10:
        details.append(f"\n<i>...–∏ –µ—â—ë {len(results) - 10} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</i>")
    
    return header + "\n".join(details)

def create_arbitrage_results_keyboard(mode: str, is_cs2: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Args:
        mode: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        is_cs2: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è CS2
        
    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    keyboard.row(
        InlineKeyboardButton("üí∞ –ü–æ –ø—Ä–∏–±—ã–ª–∏", callback_data=f"arbitrage_results:sort:profit"),
        InlineKeyboardButton("üìä –ü–æ %", callback_data=f"arbitrage_results:sort:profit_percentage")
    )
    keyboard.row(
        InlineKeyboardButton("‚ö° –ü–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏", callback_data=f"arbitrage_results:sort:liquidity"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"arbitrage_results:refresh")
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–≥–æ)
    # keyboard.row(
    #     InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"arbitrage_page:prev"),
    #     InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"arbitrage_page:next")
    # )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    if is_cs2:
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_arbitrage_execution"))
    else:
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_arbitrage_execution"))
    
    return keyboard

def create_arbitrage_mode_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é ArbitrageMode
    keyboard.add(
        InlineKeyboardButton("üöÄ –†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞", callback_data="arbitrage_mode:balance_boost"),
        InlineKeyboardButton("üíº –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä", callback_data="arbitrage_mode:medium_trader"),
        InlineKeyboardButton("üëë Trade Pro", callback_data="arbitrage_mode:trade_pro"),
        InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="arbitrage_mode:info")
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="arbitrage_menu"))
    
    return keyboard

def create_budget_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞.
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞
    keyboard.add(
        InlineKeyboardButton("100", callback_data="budget:100"),
        InlineKeyboardButton("200", callback_data="budget:200"),
        InlineKeyboardButton("300", callback_data="budget:300"),
        InlineKeyboardButton("400", callback_data="budget:400"),
        InlineKeyboardButton("500", callback_data="budget:500"),
        InlineKeyboardButton("1000", callback_data="budget:1000"),
        InlineKeyboardButton("Custom", callback_data="budget:custom")
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="arbitrage_menu"))
    
    return keyboard 

async def start_arbitrage_search(callback_query: CallbackQuery, state: FSMContext):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    user_data = await state.get_data()
    mode = user_data.get('arbitrage_mode', 'profit')
    budget = user_data.get('arbitrage_budget', 100)
    selected_games = user_data.get('selected_games', [])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∏–≥—Ä—ã
    if not selected_games:
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É", show_alert=True)
        await callback_query.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:",
            reply_markup=await get_games_selection_keyboard(user_data)
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    game_names = get_game_display_names(selected_games)
    mode_display = get_mode_display_name(mode)
    
    await callback_query.message.edit_text(
        f"üîç <b>–ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞—á–∞—Ç</b>\n\n"
        f"–†–µ–∂–∏–º: <b>{mode_display}</b>\n"
        f"–ë—é–¥–∂–µ—Ç: <b>${budget:.2f}</b>\n"
        f"–ò–≥—Ä—ã: <b>{', '.join(game_names)}</b>\n\n"
        f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>"
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    params = {
        'mode': mode,
        'budget': budget,
        'games': selected_games
    }
    
    results = []
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç –∏ –ø–æ–∏—Å–∫–æ–≤–∏–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        api_client = DMarketAPIClient()
        arbitrage_finder = DMarketArbitrageFinder(api_client)
        
        # –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        for game_id in selected_games:
            try:
                game_results = await arbitrage_finder.find_arbitrage_opportunities(
                    game_id=game_id,
                    budget=budget,
                    mode=mode
                )
                results.extend(game_results)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –∏–≥—Ä—ã {game_id}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if mode == 'profit':
            results.sort(key=lambda x: x.profit_usd, reverse=True)
        elif mode == 'profit_percentage':
            results.sort(key=lambda x: x.profit_percentage, reverse=True)
        elif mode == 'liquidity':
            results.sort(key=lambda x: x.liquidity * x.profit_percentage, reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = results[:30]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        response_message = format_arbitrage_results(results, mode)
        keyboard = create_arbitrage_results_keyboard(mode)
        
        await callback_query.message.edit_text(
            response_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}", exc_info=True)
        await callback_query.message.edit_text(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )

def get_game_display_names(game_ids: List[str]) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –∏–≥—Ä –ø–æ –∏—Ö ID.
    
    Args:
        game_ids: –°–ø–∏—Å–æ–∫ ID –∏–≥—Ä
        
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∏–º–µ–Ω –∏–≥—Ä
    """
    game_names = {
        "a8db": "CS2",
        "9a92": "Dota 2",
        "tf2": "Team Fortress 2",
        "rust": "Rust"
    }
    return [game_names.get(game_id, game_id) for game_id in game_ids]

async def start_cs2_arbitrage_search(callback_query: CallbackQuery, state: FSMContext):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ CS2 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∫—Ä–∞–ø–µ—Ä–∞.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    user_data = await state.get_data()
    mode = user_data.get('mode', 'profit')
    budget = user_data.get('arbitrage_budget', 100)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    await callback_query.message.edit_text(
        f"üîç <b>–ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π CS2 –Ω–∞—á–∞—Ç</b>\n\n"
        f"–†–µ–∂–∏–º: <b>{get_mode_display_name(mode)}</b>\n"
        f"–ë—é–¥–∂–µ—Ç: <b>${budget:.2f}</b>\n\n"
        f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>",
        parse_mode="HTML"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_service = get_trading_service()
        
        # –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è CS2
        results = await trading_service.find_cs2_arbitrage_opportunities()
        
        if not results:
            await callback_query.message.edit_text(
                "‚ö†Ô∏è <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
                reply_markup=get_back_to_execution_keyboard()
            )
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if mode == 'profit':
            results.sort(key=lambda x: x['profit_amount'], reverse=True)
        elif mode == 'profit_percentage':
            results.sort(key=lambda x: x['profit_percent'], reverse=True)
        elif mode == 'liquidity':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–∞–∫ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é
            results.sort(key=lambda x: x.get('liquidity', 'Medium') == 'High' and x['profit_percent'], reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = results[:30]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        response_message = format_cs2_arbitrage_results(results, mode)
        keyboard = create_arbitrage_results_keyboard(mode, is_cs2=True)
        
        await callback_query.message.edit_text(
            response_message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ CS2: {e}", exc_info=True)
        await callback_query.message.edit_text(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}",
            reply_markup=get_back_to_execution_keyboard()
        )

def format_cs2_arbitrage_results(results: List[Dict[str, Any]], mode: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π CS2 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        mode: –†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (profit, profit_percentage, liquidity)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    if not results:
        return "‚ö†Ô∏è <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == 'profit':
        header = "üí∞ <b>–ù–∞–π–¥–µ–Ω—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ CS2 (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–±—ã–ª–∏)</b>\n\n"
    elif mode == 'profit_percentage':
        header = "üìä <b>–ù–∞–π–¥–µ–Ω—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ CS2 (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ % –ø—Ä–∏–±—ã–ª–∏)</b>\n\n"
    elif mode == 'liquidity':
        header = "‚ö° <b>–ù–∞–π–¥–µ–Ω—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ CS2 (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)</b>\n\n"
    else:
        header = "üîç <b>–ù–∞–π–¥–µ–Ω—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ CS2</b>\n\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    items = []
    for i, result in enumerate(results, 1):
        item_name = result.get('item_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
        buy_market = result.get('buy_market', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        buy_price = result.get('buy_price', 0.0)
        sell_market = result.get('sell_market', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        sell_price = result.get('sell_price', 0.0)
        profit_amount = result.get('profit_amount', 0.0)
        profit_percent = result.get('profit_percent', 0.0)
        category = result.get('category', '–î—Ä—É–≥–æ–µ')
        rarity = result.get('rarity', '–û–±—ã—á–Ω—ã–π')
        liquidity = result.get('liquidity', '–°—Ä–µ–¥–Ω—è—è')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_emoji = {
            'knife': 'üî™',
            'pistol': 'üî´',
            'rifle': 'üéØ',
            'sniper': 'üî≠',
            'smg': 'üí®',
            'shotgun': 'üí•',
            'machinegun': '‚ö°',
            'gloves': 'üß§',
            'container': 'üì¶',
            'key': 'üîë',
            'other': 'üéÆ'
        }
        
        emoji = category_emoji.get(category.lower(), 'üéÆ')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–±—ã–ª–∏
        if profit_percent >= 15:
            profit_indicator = "üü¢"  # –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å
        elif profit_percent >= 8:
            profit_indicator = "üü°"  # –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å
        else:
            profit_indicator = "üü†"  # –ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        item_text = (
            f"{i}. {emoji} <b>{item_name}</b>\n"
            f"   ‚Ü≥ –ü–æ–∫—É–ø–∫–∞: {buy_market} - <b>${buy_price:.2f}</b>\n"
            f"   ‚Ü≥ –ü—Ä–æ–¥–∞–∂–∞: {sell_market} - <b>${sell_price:.2f}</b>\n"
            f"   ‚Ü≥ –ü—Ä–∏–±—ã–ª—å: {profit_indicator} <b>${profit_amount:.2f}</b> ({profit_percent:.2f}%)\n"
            f"   ‚Ü≥ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, –†–µ–¥–∫–æ—Å—Ç—å: {rarity}, –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity}\n"
        )
        
        items.append(item_text)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    results_text = "\n".join(items)
    
    footer = (
        f"\n<i>–ù–∞–π–¥–µ–Ω–æ {len(results)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. "
        f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>"
    )
    
    return header + results_text + footer

def get_back_to_execution_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —ç–∫—Ä–∞–Ω—É –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    
    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∑–∞–ø—É—Å–∫–∞", callback_data="back_to_arbitrage_execution"))
    return keyboard

def get_arbitrage_execution_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    
    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞
    keyboard.add(
        InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞", callback_data="arbitrage_exec:start")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ CS2
    keyboard.add(
        InlineKeyboardButton("üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ CS2", callback_data="arbitrage_exec:start_cs2")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    keyboard.row(
        InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="arbitrage_exec:edit_mode"),
        InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="arbitrage_exec:edit_budget")
    )
    
    keyboard.add(
        InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—ã", callback_data="arbitrage_exec:edit_games")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="arbitrage_exec:back")
    )
    
    return keyboard

def get_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    Returns:
        –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    return keyboard 