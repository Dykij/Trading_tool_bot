"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ (–¥–∞—à–±–æ—Ä–¥–∞) –≤ Telegram –±–æ—Ç–µ.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏
—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram –±–æ—Ç–∞.
"""

import os
import logging
import asyncio
from typing import Dict, List, Any, Union, Optional
from datetime import datetime, timedelta

# aiogram –∏–º–ø–æ—Ä—Ç—ã
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é aiogram
    import pkg_resources
    AIOGRAM_VERSION = pkg_resources.get_distribution("aiogram").version
    IS_AIOGRAM_V2 = AIOGRAM_VERSION.startswith('2')
    
    if IS_AIOGRAM_V2:
        # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è aiogram v2.x
        from aiogram import Bot, Dispatcher, types
        from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
        from aiogram.utils.callback_data import CallbackData
        from aiogram.dispatcher import FSMContext
        from aiogram.dispatcher.filters.state import State, StatesGroup
    else:
        # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è aiogram v3.x
        from aiogram import Bot, Dispatcher, F, types
        from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.filters import Command
        from aiogram.fsm.context import FSMContext
        from aiogram.fsm.state import State, StatesGroup
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ aiogram: {e}")
    raise

from utils.dashboard import dashboard_generator
from utils.logging_config import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)

# Callback data –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
if IS_AIOGRAM_V2:
    dashboard_callback = CallbackData("dashboard", "action", "param")
else:
    # –í aiogram v3 –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–∞—Ä—Å–∏—Ç—å callback_data –≤—Ä—É—á–Ω—É—é
    DASHBOARD_PREFIX = "dashboard:"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—à–±–æ—Ä–¥–æ–º
class DashboardState(StatesGroup):
    waiting_for_period = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    waiting_for_report_type = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    waiting_for_custom_days = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π

async def get_dashboard_keyboard() -> Union[InlineKeyboardMarkup, 'InlineKeyboardBuilder']:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞.
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    """
    if IS_AIOGRAM_V2:
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        keyboard.add(
            InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=dashboard_callback.new(action="overview", param="")),
            InlineKeyboardButton("üí∞ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data=dashboard_callback.new(action="trading", param="7"))
        )
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–æ–ø—ã
        keyboard.add(
            InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏", callback_data=dashboard_callback.new(action="profit_chart", param="30")),
            InlineKeyboardButton("üèÜ –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data=dashboard_callback.new(action="top_items", param="30"))
        )
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        keyboard.add(
            InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", callback_data=dashboard_callback.new(action="system", param="")),
            InlineKeyboardButton("üîÑ –ê—Ä–±–∏—Ç—Ä–∞–∂", callback_data=dashboard_callback.new(action="arbitrage", param="7"))
        )
        
        # –ü–µ—Ä–∏–æ–¥—ã
        keyboard.add(
            InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data=dashboard_callback.new(action="set_period", param="7")),
            InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data=dashboard_callback.new(action="set_period", param="30")),
            InlineKeyboardButton("90 –¥–Ω–µ–π", callback_data=dashboard_callback.new(action="set_period", param="90"))
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=dashboard_callback.new(action="refresh", param="")),
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        
        return keyboard
    else:
        # –î–ª—è aiogram v3
        builder = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        builder.row(
            InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"{DASHBOARD_PREFIX}overview:"),
            InlineKeyboardButton(text="üí∞ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data=f"{DASHBOARD_PREFIX}trading:7")
        )
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–æ–ø—ã
        builder.row(
            InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏", callback_data=f"{DASHBOARD_PREFIX}profit_chart:30"),
            InlineKeyboardButton(text="üèÜ –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data=f"{DASHBOARD_PREFIX}top_items:30")
        )
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        builder.row(
            InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", callback_data=f"{DASHBOARD_PREFIX}system:"),
            InlineKeyboardButton(text="üîÑ –ê—Ä–±–∏—Ç—Ä–∞–∂", callback_data=f"{DASHBOARD_PREFIX}arbitrage:7")
        )
        
        # –ü–µ—Ä–∏–æ–¥—ã
        builder.row(
            InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data=f"{DASHBOARD_PREFIX}set_period:7"),
            InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data=f"{DASHBOARD_PREFIX}set_period:30"),
            InlineKeyboardButton(text="90 –¥–Ω–µ–π", callback_data=f"{DASHBOARD_PREFIX}set_period:90")
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç
        builder.row(
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"{DASHBOARD_PREFIX}refresh:"),
            InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        
        return builder.as_markup()

async def cmd_dashboard(message: Union[types.Message, types.CallbackQuery], state: Optional[FSMContext] = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /dashboard.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    if isinstance(message, types.CallbackQuery):
        # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ callback_query
        message = message.message
        await message.edit_text(
            "üîç <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å DMarket Bot</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:",
            reply_markup=await get_dashboard_keyboard(),
            parse_mode=ParseMode.HTML
        )
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
        await message.answer(
            "üîç <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å DMarket Bot</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:",
            reply_markup=await get_dashboard_keyboard(),
            parse_mode=ParseMode.HTML
        )

async def process_dashboard_callback(callback_query: types.CallbackQuery, action: str, param: str, state: Optional[FSMContext] = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞.
    
    Args:
        callback_query: Callback Query
        action: –î–µ–π—Å—Ç–≤–∏–µ (overview, trading, profit_chart –∏ —Ç.–¥.)
        param: –ü–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö)
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    if action == "overview":
        # –û–±—â–∏–π –æ–±–∑–æ—Ä
        await show_dashboard_overview(callback_query)
    
    elif action == "trading":
        # –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        days = int(param) if param else 7
        await show_trading_statistics(callback_query, days)
    
    elif action == "profit_chart":
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏
        days = int(param) if param else 30
        await show_profit_chart(callback_query, days)
    
    elif action == "top_items":
        # –¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        days = int(param) if param else 30
        await show_top_items(callback_query, days)
    
    elif action == "system":
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        await show_system_metrics(callback_query)
    
    elif action == "arbitrage":
        # –ú–µ—Ç—Ä–∏–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        days = int(param) if param else 7
        await show_arbitrage_metrics(callback_query, days)
    
    elif action == "set_period":
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞
        if state:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            async def set_state_data(state_obj, key, value):
                if IS_AIOGRAM_V2:
                    await state_obj.update_data({key: value})
                else:
                    await state_obj.update_data({key: value})
            
            await set_state_data(state, "period", int(param))
            await callback_query.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥: {param} –¥–Ω–µ–π")
    
    elif action == "refresh":
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        dashboard_generator.invalidate_cache()
        await callback_query.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –¥–∞—à–±–æ—Ä–¥–∞
        await cmd_dashboard(callback_query)

async def show_dashboard_overview(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π –æ–±–∑–æ—Ä –¥–∞—à–±–æ—Ä–¥–∞.
    
    Args:
        callback_query: Callback Query
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã
    system_data = await dashboard_generator.get_system_overview()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 7 –¥–Ω–µ–π
    trading_data = await dashboard_generator.get_trading_statistics(days=7)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        "üìä <b>–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã DMarket Bot</b>\n\n"
        f"<b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</b>\n"
        f"CPU: {system_data['system_metrics']['cpu_usage']['current']}% (—Å—Ä–µ–¥–Ω. {system_data['system_metrics']['cpu_usage']['average']:.1f}%)\n"
        f"–ü–∞–º—è—Ç—å: {system_data['system_metrics']['memory_usage']['current_percent']:.1f}% "
        f"({system_data['system_metrics']['memory_usage']['current_mb']:.1f} –ú–ë)\n"
        f"–î–∏—Å–∫: {system_data['system_metrics']['disk_usage']:.1f}%\n\n"
        
        f"<b>API –º–µ—Ç—Ä–∏–∫–∏:</b>\n"
        f"–í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: {system_data['api_metrics']['total_calls']}\n"
        f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {system_data['api_metrics']['success_rate']:.1f}%\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {system_data['api_metrics']['avg_response_time']:.3f} —Å–µ–∫\n"
        f"–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {system_data['api_metrics']['calls_per_minute']:.1f}\n\n"
        
        f"<b>–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (7 –¥–Ω–µ–π):</b>\n"
        f"–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {trading_data['total_operations']}\n"
        f"–£—Å–ø–µ—à–Ω—ã—Ö: {trading_data['successful_operations']} ({trading_data['success_rate']:.1f}%)\n"
        f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${trading_data['total_profit']:.2f}\n"
        f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${trading_data['avg_profit_per_operation']:.2f}/–æ–ø–µ—Ä–∞—Ü–∏—è\n\n"
        
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        message_text,
        reply_markup=await get_dashboard_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def show_trading_statistics(callback_query: types.CallbackQuery, days: int = 7):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    Args:
        callback_query: Callback Query
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    trading_data = await dashboard_generator.get_trading_statistics(days=days)
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
    if trading_data.get("total_operations", 0) == 0:
        message_text = (
            f"üìà <b>–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({days} –¥–Ω–µ–π)</b>\n\n"
            "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –ø–æ –¥–Ω—è–º
        days_summary = ""
        for day, count in sorted(trading_data.get("operations_by_day", {}).items()):
            days_summary += f"{day}: {count} –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –ø–æ —Ç–∏–ø–∞–º
        types_summary = ""
        for op_type, count in trading_data.get("operations_by_type", {}).items():
            types_summary += f"{op_type}: {count} –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üìà <b>–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({days} –¥–Ω–µ–π)</b>\n\n"
            f"<b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {trading_data['total_operations']}\n"
            f"–£—Å–ø–µ—à–Ω—ã—Ö: {trading_data['successful_operations']} ({trading_data['success_rate']:.1f}%)\n"
            f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {trading_data['failed_operations']}\n"
            f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${trading_data['total_profit']:.2f}\n"
            f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${trading_data['avg_profit_per_operation']:.2f}/–æ–ø–µ—Ä–∞—Ü–∏—è\n\n"
            
            f"<b>–û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º:</b>\n{days_summary}\n"
            f"<b>–û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º:</b>\n{types_summary}\n"
            
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        message_text,
        reply_markup=await get_dashboard_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def show_profit_chart(callback_query: types.CallbackQuery, days: int = 30):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏.
    
    Args:
        callback_query: Callback Query
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    await callback_query.message.edit_text(
        f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ {days} –¥–Ω–µ–π...",
        parse_mode=ParseMode.HTML
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏
    chart_buffer = await dashboard_generator.generate_profit_chart(days=days)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    await callback_query.bot.send_photo(
        chat_id=callback_query.message.chat.id,
        photo=chart_buffer,
        caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π"
    )
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–∞—à–±–æ—Ä–¥–∞
    await cmd_dashboard(callback_query)

async def show_top_items(callback_query: types.CallbackQuery, days: int = 30):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏.
    
    Args:
        callback_query: Callback Query
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    top_items = await dashboard_generator.get_top_items(days=days, limit=10)
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
    if not top_items:
        message_text = (
            f"üèÜ <b>–¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ({days} –¥–Ω–µ–π)</b>\n\n"
            "–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö."
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        items_list = ""
        for i, item in enumerate(top_items, 1):
            items_list += (
                f"{i}. <b>{item['item_name']}</b> ({item['game']})\n"
                f"   –ü—Ä–∏–±—ã–ª—å: ${item['total_profit']:.2f} ({item['trades_count']} —Å–¥–µ–ª–æ–∫)\n"
                f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${item['avg_profit']:.2f}\n\n"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üèÜ <b>–¢–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ ({days} –¥–Ω–µ–π)</b>\n\n"
            f"{items_list}"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        message_text,
        reply_markup=await get_dashboard_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def show_system_metrics(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏.
    
    Args:
        callback_query: Callback Query
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    await callback_query.message.edit_text(
        "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...",
        parse_mode=ParseMode.HTML
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    chart_buffer = await dashboard_generator.generate_performance_chart()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    await callback_query.bot.send_photo(
        chat_id=callback_query.message.chat.id,
        photo=chart_buffer,
        caption="üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"
    )
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–∞—à–±–æ—Ä–¥–∞
    await cmd_dashboard(callback_query)

async def show_arbitrage_metrics(callback_query: types.CallbackQuery, days: int = 7):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    Args:
        callback_query: Callback Query
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    arbitrage_data = await dashboard_generator.get_arbitrage_metrics(days=days)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"üîÑ <b>–ú–µ—Ç—Ä–∏–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ({days} –¥–Ω–µ–π)</b>\n\n"
        f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {arbitrage_data['total_operations']}\n"
        f"–£—Å–ø–µ—à–Ω—ã—Ö: {arbitrage_data['success_operations']}\n"
        f"–û—à–∏–±–æ–∫: {arbitrage_data['error_operations']}\n"
        f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {arbitrage_data['success_rate']:.1f}%\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {arbitrage_data['avg_duration']:.3f} —Å–µ–∫\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Ç–∏–ø–∞–º –º–µ—Ç—Ä–∏–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if arbitrage_data.get('detailed_metrics'):
        message_text += "<b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n"
        for i, metric in enumerate(arbitrage_data['detailed_metrics'][:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 –º–µ—Ç—Ä–∏–∫
            message_text += (
                f"{i}. {metric.get('name', 'Unknown')}\n"
                f"   –ó–∞–ø—É—Å–∫–æ–≤: {metric.get('total_count', 0)}\n"
                f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {100 - metric.get('error_rate', 0):.1f}%\n"
                f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metric.get('avg_duration', 0):.3f} —Å–µ–∫\n\n"
            )
    
    message_text += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        message_text,
        reply_markup=await get_dashboard_keyboard(),
        parse_mode=ParseMode.HTML
    )

def register_dashboard_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–∞—à–±–æ—Ä–¥–∞.
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    if IS_AIOGRAM_V2:
        # –î–ª—è aiogram v2
        dp.register_message_handler(cmd_dashboard, commands=["dashboard"])
        dp.register_callback_query_handler(
            lambda c, state: process_dashboard_callback(
                c, 
                dashboard_callback.parse(c.data)["action"], 
                dashboard_callback.parse(c.data)["param"],
                state
            ),
            lambda c: dashboard_callback.check(c.data)
        )
    else:
        # –î–ª—è aiogram v3
        dp.message.register(cmd_dashboard, Command(commands=["dashboard"]))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query
        async def process_v3_dashboard_callback(callback_query: types.CallbackQuery, state: FSMContext):
            if callback_query.data and callback_query.data.startswith(DASHBOARD_PREFIX):
                parts = callback_query.data[len(DASHBOARD_PREFIX):].split(":")
                action = parts[0]
                param = parts[1] if len(parts) > 1 else ""
                await process_dashboard_callback(callback_query, action, param, state)
        
        dp.callback_query.register(
            process_v3_dashboard_callback,
            lambda c: c.data and c.data.startswith(DASHBOARD_PREFIX)
        ) 