"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–µ—Å–æ—á–Ω–∏—Ü—ã (sandbox) –≤ Telegram –±–æ—Ç–µ.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.
"""

import os
import logging
import asyncio
import json
from typing import Dict, List, Any, Union, Optional
from datetime import datetime, timedelta

# aiogram –∏–º–ø–æ—Ä—Ç—ã
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é aiogram
    import pkg_resources
    AIOGRAM_VERSION = pkg_resources.get_distribution("aiogram").version
    IS_AIOGRAM_V2 = AIOGRAM_VERSION.startswith('2')
    
    if IS_AIOGRAM_V2:
        # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è aiogram v2.x
        from aiogram import Bot, Dispatcher, types
        from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
        from aiogram.utils.callback_data import CallbackData
        from aiogram.dispatcher import FSMContext
        from aiogram.dispatcher.filters.state import State, StatesGroup
    else:
        # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è aiogram v3.x
        from aiogram import Bot, Dispatcher, F, types
        from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.filters import Command
        from aiogram.fsm.context import FSMContext
        from aiogram.fsm.state import State, StatesGroup
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ aiogram: {e}")
    raise

from utils.sandbox import sandbox
from utils.logging_config import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)

# Callback data –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
if IS_AIOGRAM_V2:
    sandbox_callback = CallbackData("sandbox", "action", "param")
else:
    # –í aiogram v3 –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–∞—Ä—Å–∏—Ç—å callback_data –≤—Ä—É—á–Ω—É—é
    SANDBOX_PREFIX = "sandbox:"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∂–∏–º–æ–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã
class SandboxState(StatesGroup):
    waiting_for_balance = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞
    waiting_for_item_id = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ ID –ø—Ä–µ–¥–º–µ—Ç–∞
    waiting_for_item_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    waiting_for_price = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
    waiting_for_quantity = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    waiting_for_days = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    waiting_for_speed = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
    waiting_for_volatility = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏

async def get_sandbox_keyboard() -> Union[InlineKeyboardMarkup, 'InlineKeyboardBuilder']:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–µ—Å–æ—á–Ω–∏—Ü—ã.
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π
    """
    if IS_AIOGRAM_V2:
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        # –°—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if sandbox.is_active:
            keyboard.add(
                InlineKeyboardButton("üü¢ –†–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω", callback_data=sandbox_callback.new(action="status", param="")),
                InlineKeyboardButton("üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=sandbox_callback.new(action="deactivate", param=""))
            )
        else:
            keyboard.add(
                InlineKeyboardButton("üî¥ –†–µ–∂–∏–º –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", callback_data=sandbox_callback.new(action="status", param="")),
                InlineKeyboardButton("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=sandbox_callback.new(action="activate", param=""))
            )
        
        # –°–∏–º—É–ª—è—Ü–∏—è
        if sandbox.simulation_active:
            keyboard.add(
                InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", callback_data=sandbox_callback.new(action="stop_simulation", param=""))
            )
        else:
            keyboard.add(
                InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", callback_data=sandbox_callback.new(action="start_simulation", param=""))
            )
        
        # –û–ø–µ—Ä–∞—Ü–∏–∏
        keyboard.add(
            InlineKeyboardButton("üí≤ –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=sandbox_callback.new(action="buy", param="")),
            InlineKeyboardButton("üí± –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=sandbox_callback.new(action="sell", param=""))
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        keyboard.add(
            InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data=sandbox_callback.new(action="info", param="")),
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data=sandbox_callback.new(action="report", param=""))
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard.add(
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=sandbox_callback.new(action="settings", param="")),
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å", callback_data=sandbox_callback.new(action="reset", param=""))
        )
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.add(
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        
        return keyboard
    else:
        # –î–ª—è aiogram v3
        builder = InlineKeyboardBuilder()
        
        # –°—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if sandbox.is_active:
            builder.row(
                InlineKeyboardButton(text="üü¢ –†–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω", callback_data=f"{SANDBOX_PREFIX}status:"),
                InlineKeyboardButton(text="üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{SANDBOX_PREFIX}deactivate:")
            )
        else:
            builder.row(
                InlineKeyboardButton(text="üî¥ –†–µ–∂–∏–º –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", callback_data=f"{SANDBOX_PREFIX}status:"),
                InlineKeyboardButton(text="üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{SANDBOX_PREFIX}activate:")
            )
        
        # –°–∏–º—É–ª—è—Ü–∏—è
        if sandbox.simulation_active:
            builder.row(
                InlineKeyboardButton(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", callback_data=f"{SANDBOX_PREFIX}stop_simulation:")
            )
        else:
            builder.row(
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", callback_data=f"{SANDBOX_PREFIX}start_simulation:")
            )
        
        # –û–ø–µ—Ä–∞—Ü–∏–∏
        builder.row(
            InlineKeyboardButton(text="üí≤ –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"{SANDBOX_PREFIX}buy:"),
            InlineKeyboardButton(text="üí± –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"{SANDBOX_PREFIX}sell:")
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        builder.row(
            InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data=f"{SANDBOX_PREFIX}info:"),
            InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç", callback_data=f"{SANDBOX_PREFIX}report:")
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        builder.row(
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"{SANDBOX_PREFIX}settings:"),
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å", callback_data=f"{SANDBOX_PREFIX}reset:")
        )
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        builder.row(
            InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        
        return builder.as_markup()

async def cmd_sandbox(message: Union[types.Message, types.CallbackQuery], state: Optional[FSMContext] = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /sandbox.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if sandbox.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    simulation_text = "‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞" if sandbox.simulation_active else "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    
    if sandbox.is_active:
        balance_text = f"${sandbox.virtual_balance:.2f}"
        items_count = len(sandbox.virtual_inventory)
        items_text = f"{items_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
    else:
        balance_text = "N/A"
        items_text = "N/A"
    
    info_text = (
        "üéÆ <b>–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã (Sandbox)</b>\n\n"
        "–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>–°–∏–º—É–ª—è—Ü–∏—è:</b> {simulation_text}\n"
        f"<b>–ë–∞–ª–∞–Ω—Å:</b> {balance_text}\n"
        f"<b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b> {items_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if isinstance(message, types.CallbackQuery):
        # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ callback_query
        message = message.message
        await message.edit_text(
            info_text,
            reply_markup=await get_sandbox_keyboard(),
            parse_mode=ParseMode.HTML
        )
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
        await message.answer(
            info_text,
            reply_markup=await get_sandbox_keyboard(),
            parse_mode=ParseMode.HTML
        )

async def process_sandbox_callback(callback_query: types.CallbackQuery, action: str, param: str, state: Optional[FSMContext] = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã.
    
    Args:
        callback_query: Callback Query
        action: –î–µ–π—Å—Ç–≤–∏–µ (activate, deactivate, buy, sell –∏ —Ç.–¥.)
        param: –ü–∞—Ä–∞–º–µ—Ç—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    if action == "status":
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        await callback_query.answer(
            f"–°—Ç–∞—Ç—É—Å –ø–µ—Å–æ—á–Ω–∏—Ü—ã: {'–ê–∫—Ç–∏–≤–Ω–∞' if sandbox.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"
        )
    
    elif action == "activate":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if state:
            async def set_state(state_obj, state_value):
                if IS_AIOGRAM_V2:
                    await state_obj.set_state(state_value)
                else:
                    await state_obj.set_state(state_value)
            
            await callback_query.message.edit_text(
                "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–µ—Å–æ—á–Ω–∏—Ü—ã (–≤ USD):",
                parse_mode=ParseMode.HTML
            )
            await set_state(state, SandboxState.waiting_for_balance)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç state, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            sandbox.activate()
            await cmd_sandbox(callback_query)
    
    elif action == "deactivate":
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã
        sandbox.deactivate()
        await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        await cmd_sandbox(callback_query)
    
    elif action == "start_simulation":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        if state:
            async def set_state(state_obj, state_value):
                if IS_AIOGRAM_V2:
                    await state_obj.set_state(state_value)
                else:
                    await state_obj.set_state(state_value)
            
            await callback_query.message.edit_text(
                "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):",
                parse_mode=ParseMode.HTML
            )
            await set_state(state, SandboxState.waiting_for_days)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç state, –∑–∞–ø—É—Å–∫–∞–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            result = sandbox.start_simulation()
            await callback_query.answer(
                f"–°–∏–º—É–ª—è—Ü–∏—è {'–∑–∞–ø—É—â–µ–Ω–∞' if result.get('success', False) else '–Ω–µ –∑–∞–ø—É—â–µ–Ω–∞: ' + result.get('error', '')}"
            )
            await cmd_sandbox(callback_query)
    
    elif action == "stop_simulation":
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        result = sandbox.stop_simulation()
        if result.get("success", False):
            profit_text = f"–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: ${result.get('total_profit', 0):.2f}"
            await callback_query.answer(f"–°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. {profit_text}")
        else:
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        await cmd_sandbox(callback_query)
    
    elif action == "buy":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        if state and sandbox.is_active:
            async def set_state(state_obj, state_value):
                if IS_AIOGRAM_V2:
                    await state_obj.set_state(state_value)
                else:
                    await state_obj.set_state(state_value)
            
            await callback_query.message.edit_text(
                "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                parse_mode=ParseMode.HTML
            )
            await set_state(state, SandboxState.waiting_for_item_id)
        else:
            await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await cmd_sandbox(callback_query)
    
    elif action == "sell":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        if not sandbox.is_active:
            await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await cmd_sandbox(callback_query)
            return
        
        inventory = sandbox.get_inventory()
        if not inventory:
            await callback_query.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã.")
            await cmd_sandbox(callback_query)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        if IS_AIOGRAM_V2:
            keyboard = InlineKeyboardMarkup(row_width=1)
            for item in inventory:
                keyboard.add(
                    InlineKeyboardButton(
                        f"{item['item_name']} (${item['current_price']:.2f})",
                        callback_data=sandbox_callback.new(action="select_sell", param=item['item_id'])
                    )
                )
            keyboard.add(
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=sandbox_callback.new(action="back", param=""))
            )
        else:
            builder = InlineKeyboardBuilder()
            for item in inventory:
                builder.row(
                    InlineKeyboardButton(
                        text=f"{item['item_name']} (${item['current_price']:.2f})",
                        callback_data=f"{SANDBOX_PREFIX}select_sell:{item['item_id']}"
                    )
                )
            builder.row(
                InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"{SANDBOX_PREFIX}back:")
            )
            keyboard = builder.as_markup()
        
        await callback_query.message.edit_text(
            "üõí <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:</b>",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    
    elif action == "select_sell":
        # –í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        if not sandbox.is_active:
            await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await cmd_sandbox(callback_query)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        item_id = param
        inventory = sandbox.get_inventory()
        item = next((item for item in inventory if item["item_id"] == item_id), None)
        
        if not item:
            await callback_query.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
            await cmd_sandbox(callback_query)
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        if state:
            async def set_state_data(state_obj, key, value):
                if IS_AIOGRAM_V2:
                    await state_obj.update_data({key: value})
                else:
                    await state_obj.update_data({key: value})
            
            async def set_state(state_obj, state_value):
                if IS_AIOGRAM_V2:
                    await state_obj.set_state(state_value)
                else:
                    await state_obj.set_state(state_value)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await set_state_data(state, "item_id", item_id)
            await set_state_data(state, "current_price", item["current_price"])
            
            await callback_query.message.edit_text(
                f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ <b>{item['item_name']}</b>:\n\n"
                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${item['current_price']:.2f}\n"
                f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${item['purchase_price']:.2f}",
                parse_mode=ParseMode.HTML
            )
            await set_state(state, SandboxState.waiting_for_price)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç state, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            result = await sandbox.sell_item(item_id, item["current_price"])
            if result.get("success", False):
                await callback_query.answer(f"–ü—Ä–æ–¥–∞–Ω–æ! –ü—Ä–∏–±—ã–ª—å: ${result.get('profit', 0):.2f}")
            else:
                await callback_query.answer(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            await cmd_sandbox(callback_query)
    
    elif action == "info":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        if not sandbox.is_active:
            await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await cmd_sandbox(callback_query)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        balance = sandbox.get_balance()
        inventory = sandbox.get_inventory()
        total_inventory_value = sum(item.get("current_price", 0) for item in inventory)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        inventory_text = ""
        for i, item in enumerate(inventory, 1):
            current_price = item.get("current_price", 0)
            purchase_price = item.get("purchase_price", 0)
            profit = current_price - purchase_price
            profit_percent = (profit / purchase_price * 100) if purchase_price > 0 else 0
            
            inventory_text += (
                f"{i}. <b>{item.get('item_name', 'Unknown')}</b>\n"
                f"   –ö—É–ø–ª: ${purchase_price:.2f} | –¢–µ–∫—É—â: ${current_price:.2f}\n"
                f"   –ü—Ä–∏–±—ã–ª—å: ${profit:.2f} ({profit_percent:+.1f}%)\n\n"
            )
        
        if not inventory:
            inventory_text = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            "üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Å–æ—á–Ω–∏—Ü–µ</b>\n\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> ${balance:.2f}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:</b> ${total_inventory_value:.2f}\n"
            f"<b>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤:</b> ${(balance + total_inventory_value):.2f}\n\n"
            f"<b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ({len(inventory)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤):</b>\n\n{inventory_text}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        if IS_AIOGRAM_V2:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=sandbox_callback.new(action="back", param=""))
            )
        else:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"{SANDBOX_PREFIX}back:")
            )
            keyboard = builder.as_markup()
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    
    elif action == "report":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
        if not sandbox.is_active:
            await callback_query.answer("–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await cmd_sandbox(callback_query)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = sandbox.generate_sandbox_report()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        message_text = (
            "üìä <b>–û—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ</b>\n\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> ${report['balance']:.2f}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:</b> ${report['inventory_value']:.2f}\n"
            f"<b>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤:</b> ${report['total_assets']:.2f}\n\n"
            
            f"<b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
            f"–í—Å–µ–≥–æ: {report['transactions']['total']}\n"
            f"–ü–æ–∫—É–ø–∫–∏: {report['transactions']['buys']}\n"
            f"–ü—Ä–æ–¥–∞–∂–∏: {report['transactions']['sells']}\n\n"
            
            f"<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
            f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${report['financial']['total_profit']:.2f}\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${report['financial']['total_spent']:.2f}\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ: ${report['financial']['total_received']:.2f}\n"
            f"ROI: {report['financial']['roi_percent']:.1f}%\n"
            f"–ö–æ–º–∏—Å—Å–∏–∏: ${report['financial']['fees_paid']:.2f}\n\n"
            
            f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏:</b>\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {report['simulation_settings']['speed']}x\n"
            f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {report['simulation_settings']['volatility']*100:.1f}%\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: {report['simulation_settings']['transaction_fee']*100:.1f}%\n\n"
            
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        if IS_AIOGRAM_V2:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=sandbox_callback.new(action="back", param=""))
            )
        else:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"{SANDBOX_PREFIX}back:")
            )
            keyboard = builder.as_markup()
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    
    elif action == "settings":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        if IS_AIOGRAM_V2:
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üîÑ –°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏", callback_data=sandbox_callback.new(action="set_speed", param="")),
                InlineKeyboardButton("üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", callback_data=sandbox_callback.new(action="set_volatility", param="")),
                InlineKeyboardButton("üí∏ –ö–æ–º–∏—Å—Å–∏—è", callback_data=sandbox_callback.new(action="set_fee", param="")),
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=sandbox_callback.new(action="back", param=""))
            )
        else:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîÑ –°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏", callback_data=f"{SANDBOX_PREFIX}set_speed:"),
                InlineKeyboardButton(text="üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", callback_data=f"{SANDBOX_PREFIX}set_volatility:")
            )
            builder.row(
                InlineKeyboardButton(text="üí∏ –ö–æ–º–∏—Å—Å–∏—è", callback_data=f"{SANDBOX_PREFIX}set_fee:"),
                InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"{SANDBOX_PREFIX}back:")
            )
            keyboard = builder.as_markup()
        
        message_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {sandbox.simulation_speed}x\n"
            f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {sandbox.market_volatility*100:.1f}%\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: {sandbox.transaction_fee*100:.1f}%\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    
    elif action == "reset":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã
        sandbox.reset()
        await callback_query.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã —Å–±—Ä–æ—à–µ–Ω–æ")
        await cmd_sandbox(callback_query)
    
    elif action == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–µ—Å–æ—á–Ω–∏—Ü—ã
        await cmd_sandbox(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
async def process_sandbox_balance(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        balance = float(message.text.strip())
        if balance <= 0:
            await message.reply("–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        sandbox.activate(initial_balance=balance)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if IS_AIOGRAM_V2:
            await state.finish()
        else:
            await state.clear()
        
        await message.reply(f"–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º ${balance:.2f}")
        await cmd_sandbox(message)
        
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞:")

async def process_sandbox_days(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–Ω–µ–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        days = int(message.text.strip())
        if days <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async def set_state_data(state_obj, key, value):
            if IS_AIOGRAM_V2:
                await state_obj.update_data({key: value})
            else:
                await state_obj.update_data({key: value})
        
        async def set_state(state_obj, state_value):
            if IS_AIOGRAM_V2:
                await state_obj.set_state(state_value)
            else:
                await state_obj.set_state(state_value)
        
        await set_state_data(state, "days", days)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏
        await message.reply("üîÑ –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏ (–º–Ω–æ–∂–∏—Ç–µ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä 10):")
        await set_state(state, SandboxState.waiting_for_speed)
        
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π:")

async def process_sandbox_speed(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é —Å–∏–º—É–ª—è—Ü–∏–∏
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        speed = float(message.text.strip())
        if speed <= 0:
            await message.reply("–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data() if IS_AIOGRAM_V2 else await state.get_data()
        days = state_data.get("days", 30)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        result = sandbox.start_simulation(days_ago=days, speed=speed)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if IS_AIOGRAM_V2:
            await state.finish()
        else:
            await state.clear()
        
        if result.get("success", False):
            await message.reply(f"–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: {days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}x")
        else:
            await message.reply(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        await cmd_sandbox(message)
        
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏:")

async def process_sandbox_item_id(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID –ø—Ä–µ–¥–º–µ—Ç–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    item_id = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async def set_state_data(state_obj, key, value):
        if IS_AIOGRAM_V2:
            await state_obj.update_data({key: value})
        else:
            await state_obj.update_data({key: value})
    
    async def set_state(state_obj, state_value):
        if IS_AIOGRAM_V2:
            await state_obj.set_state(state_value)
        else:
            await state_obj.set_state(state_value)
    
    await set_state_data(state, "item_id", item_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    await message.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    await set_state(state, SandboxState.waiting_for_item_name)

async def process_sandbox_item_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    item_name = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async def set_state_data(state_obj, key, value):
        if IS_AIOGRAM_V2:
            await state_obj.update_data({key: value})
        else:
            await state_obj.update_data({key: value})
    
    async def set_state(state_obj, state_value):
        if IS_AIOGRAM_V2:
            await state_obj.set_state(state_value)
        else:
            await state_obj.set_state(state_value)
    
    await set_state_data(state, "item_name", item_name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞
    await message.reply("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞ (–≤ USD):")
    await set_state(state, SandboxState.waiting_for_price)

async def process_sandbox_price(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        price = float(message.text.strip())
        if price <= 0:
            await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data() if IS_AIOGRAM_V2 else await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞
        if "current_price" in state_data:
            # –≠—Ç–æ –ø—Ä–æ–¥–∞–∂–∞
            item_id = state_data.get("item_id")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É
            result = await sandbox.sell_item(item_id, price)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if IS_AIOGRAM_V2:
                await state.finish()
            else:
                await state.clear()
            
            if result.get("success", False):
                profit = result.get("profit", 0)
                profit_text = f"–ü—Ä–∏–±—ã–ª—å: ${profit:.2f}"
                await message.reply(f"–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω! {profit_text}")
            else:
                await message.reply(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            await cmd_sandbox(message)
            
        else:
            # –≠—Ç–æ –ø–æ–∫—É–ø–∫–∞
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            async def set_state_data(state_obj, key, value):
                if IS_AIOGRAM_V2:
                    await state_obj.update_data({key: value})
                else:
                    await state_obj.update_data({key: value})
            
            async def set_state(state_obj, state_value):
                if IS_AIOGRAM_V2:
                    await state_obj.set_state(state_value)
                else:
                    await state_obj.set_state(state_value)
            
            await set_state_data(state, "price", price)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            await message.reply("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
            await set_state(state, SandboxState.waiting_for_quantity)
        
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:")

async def process_sandbox_quantity(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data() if IS_AIOGRAM_V2 else await state.get_data()
        item_id = state_data.get("item_id")
        item_name = state_data.get("item_name")
        price = state_data.get("price")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        result = await sandbox.buy_item(item_id, item_name, price, quantity)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if IS_AIOGRAM_V2:
            await state.finish()
        else:
            await state.clear()
        
        if result.get("success", False):
            new_balance = result.get("new_balance", 0)
            await message.reply(f"–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}")
        else:
            await message.reply(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        await cmd_sandbox(message)
        
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:")

def register_sandbox_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ä–µ–∂–∏–º–∞ –ø–µ—Å–æ—á–Ω–∏—Ü—ã.
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    if IS_AIOGRAM_V2:
        # –î–ª—è aiogram v2
        dp.register_message_handler(cmd_sandbox, commands=["sandbox"])
        dp.register_callback_query_handler(
            lambda c, state: process_sandbox_callback(
                c, 
                sandbox_callback.parse(c.data)["action"], 
                sandbox_callback.parse(c.data)["param"],
                state
            ),
            lambda c: sandbox_callback.check(c.data)
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        dp.register_message_handler(process_sandbox_balance, state=SandboxState.waiting_for_balance)
        dp.register_message_handler(process_sandbox_days, state=SandboxState.waiting_for_days)
        dp.register_message_handler(process_sandbox_speed, state=SandboxState.waiting_for_speed)
        dp.register_message_handler(process_sandbox_item_id, state=SandboxState.waiting_for_item_id)
        dp.register_message_handler(process_sandbox_item_name, state=SandboxState.waiting_for_item_name)
        dp.register_message_handler(process_sandbox_price, state=SandboxState.waiting_for_price)
        dp.register_message_handler(process_sandbox_quantity, state=SandboxState.waiting_for_quantity)
    else:
        # –î–ª—è aiogram v3
        dp.message.register(cmd_sandbox, Command(commands=["sandbox"]))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query
        async def process_v3_sandbox_callback(callback_query: types.CallbackQuery, state: FSMContext):
            if callback_query.data and callback_query.data.startswith(SANDBOX_PREFIX):
                parts = callback_query.data[len(SANDBOX_PREFIX):].split(":")
                action = parts[0]
                param = parts[1] if len(parts) > 1 else ""
                await process_sandbox_callback(callback_query, action, param, state)
        
        dp.callback_query.register(
            process_v3_sandbox_callback,
            lambda c: c.data and c.data.startswith(SANDBOX_PREFIX)
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        dp.message.register(process_sandbox_balance, SandboxState.waiting_for_balance)
        dp.message.register(process_sandbox_days, SandboxState.waiting_for_days)
        dp.message.register(process_sandbox_speed, SandboxState.waiting_for_speed)
        dp.message.register(process_sandbox_item_id, SandboxState.waiting_for_item_id)
        dp.message.register(process_sandbox_item_name, SandboxState.waiting_for_item_name)
        dp.message.register(process_sandbox_price, SandboxState.waiting_for_price)
        dp.message.register(process_sandbox_quantity, SandboxState.waiting_for_quantity) 