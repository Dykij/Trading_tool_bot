{
    "handle_arbitrage_callback": {
        "body": "try:\n    user_id = callback_query.from_user.id\n    message_id = callback_query.message.message_id\n    chat_id = callback_query.message.chat.id\n    \n    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n    await callback_query.answer()\n    \n    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    user_metrics = bot_metrics.get_user_metrics(user_id) if hasattr(bot_metrics, 'get_user_metrics') else {}\n    \n    if action == 'start':\n        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞\n        if hasattr(bot_metrics, 'log_callback'):\n            await bot_metrics.log_callback(user_id, 'arbitrage:start')\n            \n        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å\n        await callback_query.message.edit_text(\n            'üîç <b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...</b>\\n\\n'\n            '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.',\n            parse_mode='HTML'\n        )\n        \n        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n        game_id = 'cs2'\n        min_profit = 5.0\n        \n        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n        try:\n            opportunities = await find_all_arbitrage_opportunities_async(\n                game_id=game_id,\n                min_profit_percent=min_profit,\n                use_ml_filtering=True\n            )\n        except Exception as search_error:\n            logger.error(f\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {search_error}\")\n            await callback_query.message.edit_text(\n                f\"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\\n\\n\"\n                f\"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(search_error)[:100]}...\",\n                parse_mode='HTML',\n                reply_markup=get_arbitrage_control_keyboard(False)\n            )\n            return\n        \n        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n        if opportunities and len(opportunities) > 0:\n            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n            results = \"\"\"üí∞ <b>–ù–∞–π–¥–µ–Ω—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\\n\\n\"\"\"\n            \n            # –ë–µ—Ä–µ–º —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n            for i, opp in enumerate(opportunities[:5], 1):\n                item_name = opp.get('item_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')\n                buy_price = opp.get('buy_price', 0)\n                buy_market = opp.get('buy_market', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')\n                sell_price = opp.get('sell_price', 0)\n                sell_market = opp.get('sell_market', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')\n                profit = opp.get('profit', 0)\n                profit_percent = opp.get('profit_percent', 0)\n                \n                results += f\"\"\"<b>{i}. {item_name}</b>\\n\"\"\"\n                results += f\"\"\"   üìà –ö—É–ø–∏—Ç—å: {buy_price:.2f}$ ({buy_market})\\n\"\"\"\n                results += f\"\"\"   üìâ –ü—Ä–æ–¥–∞—Ç—å: {sell_price:.2f}$ ({sell_market})\\n\"\"\"\n                results += f\"\"\"   üíµ –ü—Ä–∏–±—ã–ª—å: {profit:.2f}$ ({profit_percent:.1f}%)\\n\\n\"\"\"\n            \n            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n            results += f\"\"\"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\"\"\"\n            \n            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n            await callback_query.message.edit_text(\n                results,\n                parse_mode='HTML',\n                reply_markup=get_arbitrage_control_keyboard(True)\n            )\n        else:\n            # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n            await callback_query.message.edit_text(\n                \"üîç <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\\n\\n\"\n                \"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É.\",\n                parse_mode='HTML',\n                reply_markup=get_arbitrage_control_keyboard(False)\n            )\n    \n    elif action == 'stop':\n        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–∏—Å–∫–∞\n        if hasattr(bot_metrics, 'log_callback'):\n            await bot_metrics.log_callback(user_id, 'arbitrage:stop')\n            \n        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ\n        await callback_query.message.edit_text(\n            \"‚èπ <b>–ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\\n\\n\"\n            \"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\",\n            parse_mode='HTML',\n            reply_markup=get_arbitrage_control_keyboard(False)\n        )\n    \n    elif action == 'settings':\n        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n        if hasattr(bot_metrics, 'log_callback'):\n            await bot_metrics.log_callback(user_id, 'arbitrage:settings')\n            \n        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n        await callback_query.message.edit_text(\n            \"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\\n\\n\"\n            \"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\",\n            parse_mode='HTML',\n            reply_markup=get_arbitrage_settings_keyboard()\n        )\n    \n    else:\n        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n        logger.warning(f\"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ handle_arbitrage_callback: {action}\")\n        await callback_query.answer(\"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\")\n\nexcept Exception as e:\n    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É\n    logger.error(f\"–û—à–∏–±–∫–∞ –≤ handle_arbitrage_callback: {e}\", exc_info=True)\n    \n    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ\n    try:\n        await callback_query.answer(\"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞\")\n        \n        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ\n        if callback_query.message:\n            await callback_query.message.edit_text(\n                \"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\\n\\n\"\n                \"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\",\n                parse_mode='HTML',\n                reply_markup=get_menu_kb()\n            )\n    except Exception as reply_error:\n        logger.error(f\"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}\")",
        "decorator_list": "@track_callback"
    },
    "handle_ml_callback": {
        "body": "try:\n    user_id = callback_query.from_user.id\n    message_id = callback_query.message.message_id\n    chat_id = callback_query.message.chat.id\n    \n    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n    await callback_query.answer()\n    \n    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    user_metrics = bot_metrics.get_user_metrics(user_id) if hasattr(bot_metrics, 'get_user_metrics') else {}\n    \n    if action == \"default\":\n        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ML-—Ñ—É–Ω–∫—Ü–∏–π\n        keyboard = types.InlineKeyboardMarkup(row_width=1)\n        keyboard.add(\n            types.InlineKeyboardButton(\"üß† –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω\", callback_data=\"ml:price_prediction\"),\n            types.InlineKeyboardButton(\"üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\", callback_data=\"ml:investment\"),\n            types.InlineKeyboardButton(\"üîç –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤\", callback_data=\"ml:time_series\"),\n            types.InlineKeyboardButton(\"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\", callback_data=\"ml:compare_algorithms\"),\n            types.InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"menu:main\")\n        )\n        \n        await callback_query.message.edit_text(\n            \"ü§ñ <b>–ú–µ–Ω—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</b>\\n\\n\"\n            \"–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é ML-–º–æ–¥–µ–ª–µ–π:\",\n            reply_markup=keyboard,\n            parse_mode=\"HTML\"\n        )\n    \n    elif action == \"price_prediction\":\n        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω\n        keyboard = types.InlineKeyboardMarkup(row_width=1)\n        keyboard.add(\n            types.InlineKeyboardButton(\"üìä Prophet\", callback_data=\"ml:algorithm:prophet\"),\n            types.InlineKeyboardButton(\"üå≤ XGBoost\", callback_data=\"ml:algorithm:xgboost\"),\n            types.InlineKeyboardButton(\"üìà ARIMA\", callback_data=\"ml:algorithm:arima\"),\n            types.InlineKeyboardButton(\"üîÑ –ê–Ω—Å–∞–º–±–ª—å (–≤—Å–µ –º–µ—Ç–æ–¥—ã)\", callback_data=\"ml:algorithm:ensemble\"),\n            types.InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"ml:default\")\n        )\n        \n        await callback_query.message.edit_text(\n            \"üß† <b>–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω</b>\\n\\n\"\n            \"–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\",\n            reply_markup=keyboard,\n            parse_mode=\"HTML\"\n        )\n    \n    elif action == \"investment\":\n        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n        await callback_query.message.edit_text(\n            \"üìà <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>\\n\\n\"\n            \"–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...\",\n            parse_mode=\"HTML\"\n        )\n        \n        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ML-–ø—Ä–µ–¥–∏–∫—Ç–æ—Ä\n        if hasattr(ml_predictor, 'find_investment_opportunities'):\n            # –í—ã–∑—ã–≤–∞–µ–º ML-–º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n            try:\n                opportunities = await ml_predictor.find_investment_opportunities(\n                    game=\"cs2\",\n                    min_roi=0.1,  # 10% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å\n                    max_items=10,\n                    time_horizon=30  # 30 –¥–Ω–µ–π\n                )\n            except Exception as ml_error:\n                logger.error(f\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {ml_error}\")\n                opportunities = []\n        else:\n            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n            opportunities = [\n                {\"item_name\": \"AWP | –ê–∑–∏–º–æ–≤\", \"predicted_roi\": 15.2, \"confidence\": 0.85},\n                {\"item_name\": \"AK-47 | –í—É–ª–∫–∞–Ω\", \"predicted_roi\": 12.7, \"confidence\": 0.82},\n                {\"item_name\": \"M4A4 | –ò–º–ø–µ—Ä–∞—Ç–æ—Ä\", \"predicted_roi\": 9.5, \"confidence\": 0.78}\n            ]\n        \n        if opportunities:\n            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n            results_text = \"\"\"\\n\"\"\"\n            for item in opportunities[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5\n                results_text += f\"\"\"üîπ <b>{item['item_name']}</b>: ROI {item['predicted_roi']:.1f}% \"\"\"\n                results_text += f\"\"\"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {item['confidence']*100:.0f}%)\\n\"\"\"\n            \n            keyboard = types.InlineKeyboardMarkup()\n            keyboard.add(\n                types.InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"ml:default\")\n            )\n            \n            await callback_query.message.edit_text(\n                f\"üìà <b>–¢–æ–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</b>\\n\\n\"\n                f\"{results_text}\\n\"\n                f\"<i>–î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö ML-–º–æ–¥–µ–ª–µ–π.</i>\",\n                reply_markup=keyboard,\n                parse_mode=\"HTML\"\n            )\n        else:\n            keyboard = types.InlineKeyboardMarkup()\n            keyboard.add(\n                types.InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"ml:default\")\n            )\n            \n            await callback_query.message.edit_text(\n                \"üìà <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>\\n\\n\"\n                \"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\\n\"\n                \"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.\",\n                reply_markup=keyboard,\n                parse_mode=\"HTML\"\n            )\n    \n    elif action == \"time_series\":\n        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤\n        keyboard = types.InlineKeyboardMarkup(row_width=2)\n        keyboard.add(\n            types.InlineKeyboardButton(\"7 –¥–Ω–µ–π\", callback_data=\"ml:time_series:7\"),\n            types.InlineKeyboardButton(\"30 –¥–Ω–µ–π\", callback_data=\"ml:time_series:30\"),\n            types.InlineKeyboardButton(\"90 –¥–Ω–µ–π\", callback_data=\"ml:time_series:90\"),\n            types.InlineKeyboardButton(\"1 –≥–æ–¥\", callback_data=\"ml:time_series:365\"),\n            types.InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"ml:default\")\n        )\n        \n        await callback_query.message.edit_text(\n            \"üìä <b>–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</b>\\n\\n\"\n            \"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\"  ,\n            reply_markup=keyboard,\n            parse_mode=\"HTML\"\n        )\n    \n    elif action.startswith(\"algorithm:\"):\n        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω\n        algorithm = action.split(\":\")[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞\n        \n        await callback_query.message.edit_text(\n            f\"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {algorithm}</b>\\n\\n\"\n            f\"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:\",\n            parse_mode=\"HTML\"\n        )\n        \n        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏\n        # –ò —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞\n    \n    elif action.startswith(\"time_series:\"):\n        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤\n        days = action.split(\":\")[1]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π\n        \n        await callback_query.message.edit_text(\n            f\"üìä <b>–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∑–∞ {days} –¥–Ω–µ–π</b>\\n\\n\"\n            f\"–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\\n\"\n            f\"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\",\n            parse_mode=\"HTML\"\n        )\n        \n        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞\n        keyboard = types.InlineKeyboardMarkup()\n        keyboard.add(\n            types.InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"ml:time_series\")\n        )\n        \n        await callback_query.message.edit_text(\n            f\"üìä <b>–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∑–∞ {days} –¥–Ω–µ–π</b>\\n\\n\"\n            f\"–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\\n\"\n            f\"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\",\n            reply_markup=keyboard,\n            parse_mode=\"HTML\"\n        )\n    \n    elif action == \"compare_algorithms\":\n        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\n        await callback_query.message.edit_text(\n            \"üß™ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</b>\\n\\n\"\n            \"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...\",\n            parse_mode=\"HTML\"\n        )\n        \n        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\n        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞\n        comparison_data = [\n            {\"name\": \"Prophet\", \"accuracy\": 0.87, \"speed\": \"–°—Ä–µ–¥–Ω—è—è\", \"best_for\": \"–°–µ–∑–æ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã\"},\n            {\"name\": \"XGBoost\", \"accuracy\": 0.91, \"speed\": \"–í—ã—Å–æ–∫–∞—è\", \"best_for\": \"–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\"},\n            {\"name\": \"ARIMA\", \"accuracy\": 0.82, \"speed\": \"–ù–∏–∑–∫–∞—è\", \"best_for\": \"–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ —Ä—è–¥—ã\"},\n            {\"name\": \"–ê–Ω—Å–∞–º–±–ª—å\", \"accuracy\": 0.94, \"speed\": \"–ù–∏–∑–∫–∞—è\", \"best_for\": \"–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å\"}\n        ]\n        \n        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n        results_text = \"\"\"<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\\n\\n\"\"\"\n        for algo in comparison_data:\n            results_text += f\"\"\"<b>{algo['name']}</b>\\n\"\"\"\n            results_text += f\"\"\"   –¢–æ—á–Ω–æ—Å—Ç—å: {algo['accuracy']:.2f}\\n\"\"\"\n            results_text += f\"\"\"   –°–∫–æ—Ä–æ—Å—Ç—å: {algo['speed']}\\n\"\"\"\n            results_text += f\"\"\"   –õ—É—á—à–µ –≤—Å–µ–≥–æ –¥–ª—è: {algo['best_for']}\\n\\n\"\"\"\n        \n        keyboard = types.InlineKeyboardMarkup()\n        keyboard.add(\n            types.InlineKeyboardButton(\"‚óÄÔ∏è –ù–∞–∑–∞–¥\", callback_data=\"ml:default\")\n        )\n        \n        await callback_query.message.edit_text(\n            results_text,\n            reply_markup=keyboard,\n            parse_mode=\"HTML\"\n        )\n    \n    else:\n        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n        logger.warning(f\"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ handle_ml_callback: {action}\")\n        await callback_query.answer(\"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\")\n\nexcept Exception as e:\n    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É\n    logger.error(f\"–û—à–∏–±–∫–∞ –≤ handle_ml_callback: {e}\", exc_info=True)\n    \n    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ\n    try:\n        await callback_query.answer(\"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞\")\n        \n        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ\n        if callback_query.message:\n            keyboard = types.InlineKeyboardMarkup()\n            keyboard.add(\n                types.InlineKeyboardButton(\"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\", callback_data=\"menu:main\")\n            )\n            \n            await callback_query.message.edit_text(\n                \"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\\n\\n\"\n                \"–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\\n\"\n                \"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\",\n                reply_markup=keyboard,\n                parse_mode=\"HTML\"\n            )\n    except Exception as reply_error:\n        logger.error(f\"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}\")",
        "decorator_list": "@track_callback"
    }
}